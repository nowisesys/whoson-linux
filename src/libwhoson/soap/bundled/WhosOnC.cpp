/* WhosOnC.cpp
   Generated by gSOAP 2.8.19 from service.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "WhosOnH.h"

SOAP_SOURCE_STAMP("@(#) WhosOnC.cpp ver 2.8.19 2015-02-19 23:50:06 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_WhosOn__LogonEventMatch:
		return soap_in_WhosOn__LogonEventMatch(soap, NULL, NULL, "WhosOn:LogonEventMatch");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_WhosOn__ArrayOfLogonEvent:
		return soap_in_WhosOn__ArrayOfLogonEvent(soap, NULL, NULL, "WhosOn:ArrayOfLogonEvent");
	case SOAP_TYPE_WhosOn__LogonEvent:
		return soap_in_WhosOn__LogonEvent(soap, NULL, NULL, "WhosOn:LogonEvent");
	case SOAP_TYPE_PointerTo_WhosOn__FindLogonEventsResponse:
		return soap_in_PointerTo_WhosOn__FindLogonEventsResponse(soap, NULL, NULL, "WhosOn:FindLogonEventsResponse");
	case SOAP_TYPE_PointerTo_WhosOn__FindLogonEvents:
		return soap_in_PointerTo_WhosOn__FindLogonEvents(soap, NULL, NULL, "WhosOn:FindLogonEvents");
	case SOAP_TYPE_PointerTo_WhosOn__FindLogonEventResponse:
		return soap_in_PointerTo_WhosOn__FindLogonEventResponse(soap, NULL, NULL, "WhosOn:FindLogonEventResponse");
	case SOAP_TYPE_PointerTo_WhosOn__FindLogonEvent:
		return soap_in_PointerTo_WhosOn__FindLogonEvent(soap, NULL, NULL, "WhosOn:FindLogonEvent");
	case SOAP_TYPE_PointerTo_WhosOn__DeleteLogonEventResponse:
		return soap_in_PointerTo_WhosOn__DeleteLogonEventResponse(soap, NULL, NULL, "WhosOn:DeleteLogonEventResponse");
	case SOAP_TYPE_PointerTo_WhosOn__DeleteLogonEvent:
		return soap_in_PointerTo_WhosOn__DeleteLogonEvent(soap, NULL, NULL, "WhosOn:DeleteLogonEvent");
	case SOAP_TYPE_PointerTo_WhosOn__CloseLogonEventResponse:
		return soap_in_PointerTo_WhosOn__CloseLogonEventResponse(soap, NULL, NULL, "WhosOn:CloseLogonEventResponse");
	case SOAP_TYPE_PointerTo_WhosOn__CloseLogonEvent:
		return soap_in_PointerTo_WhosOn__CloseLogonEvent(soap, NULL, NULL, "WhosOn:CloseLogonEvent");
	case SOAP_TYPE_PointerTo_WhosOn__CreateLogonEventResponse:
		return soap_in_PointerTo_WhosOn__CreateLogonEventResponse(soap, NULL, NULL, "WhosOn:CreateLogonEventResponse");
	case SOAP_TYPE_PointerTo_WhosOn__CreateLogonEvent:
		return soap_in_PointerTo_WhosOn__CreateLogonEvent(soap, NULL, NULL, "WhosOn:CreateLogonEvent");
	case SOAP_TYPE_PointerToWhosOn__ArrayOfLogonEvent:
		return soap_in_PointerToWhosOn__ArrayOfLogonEvent(soap, NULL, NULL, "WhosOn:ArrayOfLogonEvent");
	case SOAP_TYPE_PointerToWhosOn__LogonEvent:
		return soap_in_PointerToWhosOn__LogonEvent(soap, NULL, NULL, "WhosOn:LogonEvent");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WhosOn:ArrayOfLogonEvent"))
		{	*type = SOAP_TYPE_WhosOn__ArrayOfLogonEvent;
			return soap_in_WhosOn__ArrayOfLogonEvent(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WhosOn:LogonEvent"))
		{	*type = SOAP_TYPE_WhosOn__LogonEvent;
			return soap_in_WhosOn__LogonEvent(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WhosOn:LogonEventMatch"))
		{	*type = SOAP_TYPE_WhosOn__LogonEventMatch;
			return soap_in_WhosOn__LogonEventMatch(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "WhosOn:FindLogonEventsResponse"))
		{	*type = SOAP_TYPE__WhosOn__FindLogonEventsResponse;
			return soap_in__WhosOn__FindLogonEventsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WhosOn:FindLogonEvents"))
		{	*type = SOAP_TYPE__WhosOn__FindLogonEvents;
			return soap_in__WhosOn__FindLogonEvents(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WhosOn:FindLogonEventResponse"))
		{	*type = SOAP_TYPE__WhosOn__FindLogonEventResponse;
			return soap_in__WhosOn__FindLogonEventResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WhosOn:FindLogonEvent"))
		{	*type = SOAP_TYPE__WhosOn__FindLogonEvent;
			return soap_in__WhosOn__FindLogonEvent(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WhosOn:DeleteLogonEventResponse"))
		{	*type = SOAP_TYPE__WhosOn__DeleteLogonEventResponse;
			return soap_in__WhosOn__DeleteLogonEventResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WhosOn:DeleteLogonEvent"))
		{	*type = SOAP_TYPE__WhosOn__DeleteLogonEvent;
			return soap_in__WhosOn__DeleteLogonEvent(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WhosOn:CloseLogonEventResponse"))
		{	*type = SOAP_TYPE__WhosOn__CloseLogonEventResponse;
			return soap_in__WhosOn__CloseLogonEventResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WhosOn:CloseLogonEvent"))
		{	*type = SOAP_TYPE__WhosOn__CloseLogonEvent;
			return soap_in__WhosOn__CloseLogonEvent(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WhosOn:CreateLogonEventResponse"))
		{	*type = SOAP_TYPE__WhosOn__CreateLogonEventResponse;
			return soap_in__WhosOn__CreateLogonEventResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "WhosOn:CreateLogonEvent"))
		{	*type = SOAP_TYPE__WhosOn__CreateLogonEvent;
			return soap_in__WhosOn__CreateLogonEvent(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_WhosOn__LogonEventMatch:
		return soap_out_WhosOn__LogonEventMatch(soap, tag, id, (const enum WhosOn__LogonEventMatch *)ptr, "WhosOn:LogonEventMatch");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__WhosOn__FindLogonEventsResponse:
		return ((_WhosOn__FindLogonEventsResponse *)ptr)->soap_out(soap, "WhosOn:FindLogonEventsResponse", id, NULL);
	case SOAP_TYPE__WhosOn__FindLogonEvents:
		return ((_WhosOn__FindLogonEvents *)ptr)->soap_out(soap, "WhosOn:FindLogonEvents", id, NULL);
	case SOAP_TYPE__WhosOn__FindLogonEventResponse:
		return ((_WhosOn__FindLogonEventResponse *)ptr)->soap_out(soap, "WhosOn:FindLogonEventResponse", id, NULL);
	case SOAP_TYPE__WhosOn__FindLogonEvent:
		return ((_WhosOn__FindLogonEvent *)ptr)->soap_out(soap, "WhosOn:FindLogonEvent", id, NULL);
	case SOAP_TYPE__WhosOn__DeleteLogonEventResponse:
		return ((_WhosOn__DeleteLogonEventResponse *)ptr)->soap_out(soap, "WhosOn:DeleteLogonEventResponse", id, NULL);
	case SOAP_TYPE__WhosOn__DeleteLogonEvent:
		return ((_WhosOn__DeleteLogonEvent *)ptr)->soap_out(soap, "WhosOn:DeleteLogonEvent", id, NULL);
	case SOAP_TYPE__WhosOn__CloseLogonEventResponse:
		return ((_WhosOn__CloseLogonEventResponse *)ptr)->soap_out(soap, "WhosOn:CloseLogonEventResponse", id, NULL);
	case SOAP_TYPE__WhosOn__CloseLogonEvent:
		return ((_WhosOn__CloseLogonEvent *)ptr)->soap_out(soap, "WhosOn:CloseLogonEvent", id, NULL);
	case SOAP_TYPE__WhosOn__CreateLogonEventResponse:
		return ((_WhosOn__CreateLogonEventResponse *)ptr)->soap_out(soap, "WhosOn:CreateLogonEventResponse", id, NULL);
	case SOAP_TYPE__WhosOn__CreateLogonEvent:
		return ((_WhosOn__CreateLogonEvent *)ptr)->soap_out(soap, "WhosOn:CreateLogonEvent", id, NULL);
	case SOAP_TYPE_WhosOn__ArrayOfLogonEvent:
		return ((WhosOn__ArrayOfLogonEvent *)ptr)->soap_out(soap, tag, id, "WhosOn:ArrayOfLogonEvent");
	case SOAP_TYPE_WhosOn__LogonEvent:
		return ((WhosOn__LogonEvent *)ptr)->soap_out(soap, tag, id, "WhosOn:LogonEvent");
	case SOAP_TYPE_PointerTo_WhosOn__FindLogonEventsResponse:
		return soap_out_PointerTo_WhosOn__FindLogonEventsResponse(soap, tag, id, (_WhosOn__FindLogonEventsResponse *const*)ptr, "WhosOn:FindLogonEventsResponse");
	case SOAP_TYPE_PointerTo_WhosOn__FindLogonEvents:
		return soap_out_PointerTo_WhosOn__FindLogonEvents(soap, tag, id, (_WhosOn__FindLogonEvents *const*)ptr, "WhosOn:FindLogonEvents");
	case SOAP_TYPE_PointerTo_WhosOn__FindLogonEventResponse:
		return soap_out_PointerTo_WhosOn__FindLogonEventResponse(soap, tag, id, (_WhosOn__FindLogonEventResponse *const*)ptr, "WhosOn:FindLogonEventResponse");
	case SOAP_TYPE_PointerTo_WhosOn__FindLogonEvent:
		return soap_out_PointerTo_WhosOn__FindLogonEvent(soap, tag, id, (_WhosOn__FindLogonEvent *const*)ptr, "WhosOn:FindLogonEvent");
	case SOAP_TYPE_PointerTo_WhosOn__DeleteLogonEventResponse:
		return soap_out_PointerTo_WhosOn__DeleteLogonEventResponse(soap, tag, id, (_WhosOn__DeleteLogonEventResponse *const*)ptr, "WhosOn:DeleteLogonEventResponse");
	case SOAP_TYPE_PointerTo_WhosOn__DeleteLogonEvent:
		return soap_out_PointerTo_WhosOn__DeleteLogonEvent(soap, tag, id, (_WhosOn__DeleteLogonEvent *const*)ptr, "WhosOn:DeleteLogonEvent");
	case SOAP_TYPE_PointerTo_WhosOn__CloseLogonEventResponse:
		return soap_out_PointerTo_WhosOn__CloseLogonEventResponse(soap, tag, id, (_WhosOn__CloseLogonEventResponse *const*)ptr, "WhosOn:CloseLogonEventResponse");
	case SOAP_TYPE_PointerTo_WhosOn__CloseLogonEvent:
		return soap_out_PointerTo_WhosOn__CloseLogonEvent(soap, tag, id, (_WhosOn__CloseLogonEvent *const*)ptr, "WhosOn:CloseLogonEvent");
	case SOAP_TYPE_PointerTo_WhosOn__CreateLogonEventResponse:
		return soap_out_PointerTo_WhosOn__CreateLogonEventResponse(soap, tag, id, (_WhosOn__CreateLogonEventResponse *const*)ptr, "WhosOn:CreateLogonEventResponse");
	case SOAP_TYPE_PointerTo_WhosOn__CreateLogonEvent:
		return soap_out_PointerTo_WhosOn__CreateLogonEvent(soap, tag, id, (_WhosOn__CreateLogonEvent *const*)ptr, "WhosOn:CreateLogonEvent");
	case SOAP_TYPE_PointerToWhosOn__ArrayOfLogonEvent:
		return soap_out_PointerToWhosOn__ArrayOfLogonEvent(soap, tag, id, (WhosOn__ArrayOfLogonEvent *const*)ptr, "WhosOn:ArrayOfLogonEvent");
	case SOAP_TYPE_PointerToWhosOn__LogonEvent:
		return soap_out_PointerToWhosOn__LogonEvent(soap, tag, id, (WhosOn__LogonEvent *const*)ptr, "WhosOn:LogonEvent");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__WhosOn__FindLogonEventsResponse:
		((_WhosOn__FindLogonEventsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WhosOn__FindLogonEvents:
		((_WhosOn__FindLogonEvents *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WhosOn__FindLogonEventResponse:
		((_WhosOn__FindLogonEventResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WhosOn__FindLogonEvent:
		((_WhosOn__FindLogonEvent *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WhosOn__DeleteLogonEventResponse:
		((_WhosOn__DeleteLogonEventResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WhosOn__DeleteLogonEvent:
		((_WhosOn__DeleteLogonEvent *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WhosOn__CloseLogonEventResponse:
		((_WhosOn__CloseLogonEventResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WhosOn__CloseLogonEvent:
		((_WhosOn__CloseLogonEvent *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WhosOn__CreateLogonEventResponse:
		((_WhosOn__CreateLogonEventResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__WhosOn__CreateLogonEvent:
		((_WhosOn__CreateLogonEvent *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WhosOn__ArrayOfLogonEvent:
		((WhosOn__ArrayOfLogonEvent *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WhosOn__LogonEvent:
		((WhosOn__LogonEvent *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___LogonAccountingServiceSoap2__FindLogonEvents:
		soap_serialize___LogonAccountingServiceSoap2__FindLogonEvents(soap, (const struct __LogonAccountingServiceSoap2__FindLogonEvents *)ptr);
		break;
	case SOAP_TYPE___LogonAccountingServiceSoap2__FindLogonEvent:
		soap_serialize___LogonAccountingServiceSoap2__FindLogonEvent(soap, (const struct __LogonAccountingServiceSoap2__FindLogonEvent *)ptr);
		break;
	case SOAP_TYPE___LogonAccountingServiceSoap2__DeleteLogonEvent:
		soap_serialize___LogonAccountingServiceSoap2__DeleteLogonEvent(soap, (const struct __LogonAccountingServiceSoap2__DeleteLogonEvent *)ptr);
		break;
	case SOAP_TYPE___LogonAccountingServiceSoap2__CloseLogonEvent:
		soap_serialize___LogonAccountingServiceSoap2__CloseLogonEvent(soap, (const struct __LogonAccountingServiceSoap2__CloseLogonEvent *)ptr);
		break;
	case SOAP_TYPE___LogonAccountingServiceSoap2__CreateLogonEvent:
		soap_serialize___LogonAccountingServiceSoap2__CreateLogonEvent(soap, (const struct __LogonAccountingServiceSoap2__CreateLogonEvent *)ptr);
		break;
	case SOAP_TYPE___LogonAccountingServiceSoap__FindLogonEvents:
		soap_serialize___LogonAccountingServiceSoap__FindLogonEvents(soap, (const struct __LogonAccountingServiceSoap__FindLogonEvents *)ptr);
		break;
	case SOAP_TYPE___LogonAccountingServiceSoap__FindLogonEvent:
		soap_serialize___LogonAccountingServiceSoap__FindLogonEvent(soap, (const struct __LogonAccountingServiceSoap__FindLogonEvent *)ptr);
		break;
	case SOAP_TYPE___LogonAccountingServiceSoap__DeleteLogonEvent:
		soap_serialize___LogonAccountingServiceSoap__DeleteLogonEvent(soap, (const struct __LogonAccountingServiceSoap__DeleteLogonEvent *)ptr);
		break;
	case SOAP_TYPE___LogonAccountingServiceSoap__CloseLogonEvent:
		soap_serialize___LogonAccountingServiceSoap__CloseLogonEvent(soap, (const struct __LogonAccountingServiceSoap__CloseLogonEvent *)ptr);
		break;
	case SOAP_TYPE___LogonAccountingServiceSoap__CreateLogonEvent:
		soap_serialize___LogonAccountingServiceSoap__CreateLogonEvent(soap, (const struct __LogonAccountingServiceSoap__CreateLogonEvent *)ptr);
		break;
	case SOAP_TYPE_PointerTo_WhosOn__FindLogonEventsResponse:
		soap_serialize_PointerTo_WhosOn__FindLogonEventsResponse(soap, (_WhosOn__FindLogonEventsResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_WhosOn__FindLogonEvents:
		soap_serialize_PointerTo_WhosOn__FindLogonEvents(soap, (_WhosOn__FindLogonEvents *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_WhosOn__FindLogonEventResponse:
		soap_serialize_PointerTo_WhosOn__FindLogonEventResponse(soap, (_WhosOn__FindLogonEventResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_WhosOn__FindLogonEvent:
		soap_serialize_PointerTo_WhosOn__FindLogonEvent(soap, (_WhosOn__FindLogonEvent *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_WhosOn__DeleteLogonEventResponse:
		soap_serialize_PointerTo_WhosOn__DeleteLogonEventResponse(soap, (_WhosOn__DeleteLogonEventResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_WhosOn__DeleteLogonEvent:
		soap_serialize_PointerTo_WhosOn__DeleteLogonEvent(soap, (_WhosOn__DeleteLogonEvent *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_WhosOn__CloseLogonEventResponse:
		soap_serialize_PointerTo_WhosOn__CloseLogonEventResponse(soap, (_WhosOn__CloseLogonEventResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_WhosOn__CloseLogonEvent:
		soap_serialize_PointerTo_WhosOn__CloseLogonEvent(soap, (_WhosOn__CloseLogonEvent *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_WhosOn__CreateLogonEventResponse:
		soap_serialize_PointerTo_WhosOn__CreateLogonEventResponse(soap, (_WhosOn__CreateLogonEventResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_WhosOn__CreateLogonEvent:
		soap_serialize_PointerTo_WhosOn__CreateLogonEvent(soap, (_WhosOn__CreateLogonEvent *const*)ptr);
		break;
	case SOAP_TYPE_PointerToWhosOn__ArrayOfLogonEvent:
		soap_serialize_PointerToWhosOn__ArrayOfLogonEvent(soap, (WhosOn__ArrayOfLogonEvent *const*)ptr);
		break;
	case SOAP_TYPE_PointerToWhosOn__LogonEvent:
		soap_serialize_PointerToWhosOn__LogonEvent(soap, (WhosOn__LogonEvent *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 WhosOn_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WhosOn__LogonEvent:
		return (void*)soap_instantiate_WhosOn__LogonEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WhosOn__ArrayOfLogonEvent:
		return (void*)soap_instantiate_WhosOn__ArrayOfLogonEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WhosOn__CreateLogonEvent:
		return (void*)soap_instantiate__WhosOn__CreateLogonEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WhosOn__CreateLogonEventResponse:
		return (void*)soap_instantiate__WhosOn__CreateLogonEventResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WhosOn__CloseLogonEvent:
		return (void*)soap_instantiate__WhosOn__CloseLogonEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WhosOn__CloseLogonEventResponse:
		return (void*)soap_instantiate__WhosOn__CloseLogonEventResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WhosOn__DeleteLogonEvent:
		return (void*)soap_instantiate__WhosOn__DeleteLogonEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WhosOn__DeleteLogonEventResponse:
		return (void*)soap_instantiate__WhosOn__DeleteLogonEventResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WhosOn__FindLogonEvent:
		return (void*)soap_instantiate__WhosOn__FindLogonEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WhosOn__FindLogonEventResponse:
		return (void*)soap_instantiate__WhosOn__FindLogonEventResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WhosOn__FindLogonEvents:
		return (void*)soap_instantiate__WhosOn__FindLogonEvents(soap, -1, type, arrayType, n);
	case SOAP_TYPE__WhosOn__FindLogonEventsResponse:
		return (void*)soap_instantiate__WhosOn__FindLogonEventsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___LogonAccountingServiceSoap__CreateLogonEvent:
		return (void*)soap_instantiate___LogonAccountingServiceSoap__CreateLogonEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE___LogonAccountingServiceSoap__CloseLogonEvent:
		return (void*)soap_instantiate___LogonAccountingServiceSoap__CloseLogonEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE___LogonAccountingServiceSoap__DeleteLogonEvent:
		return (void*)soap_instantiate___LogonAccountingServiceSoap__DeleteLogonEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE___LogonAccountingServiceSoap__FindLogonEvent:
		return (void*)soap_instantiate___LogonAccountingServiceSoap__FindLogonEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE___LogonAccountingServiceSoap__FindLogonEvents:
		return (void*)soap_instantiate___LogonAccountingServiceSoap__FindLogonEvents(soap, -1, type, arrayType, n);
	case SOAP_TYPE___LogonAccountingServiceSoap2__CreateLogonEvent:
		return (void*)soap_instantiate___LogonAccountingServiceSoap2__CreateLogonEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE___LogonAccountingServiceSoap2__CloseLogonEvent:
		return (void*)soap_instantiate___LogonAccountingServiceSoap2__CloseLogonEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE___LogonAccountingServiceSoap2__DeleteLogonEvent:
		return (void*)soap_instantiate___LogonAccountingServiceSoap2__DeleteLogonEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE___LogonAccountingServiceSoap2__FindLogonEvent:
		return (void*)soap_instantiate___LogonAccountingServiceSoap2__FindLogonEvent(soap, -1, type, arrayType, n);
	case SOAP_TYPE___LogonAccountingServiceSoap2__FindLogonEvents:
		return (void*)soap_instantiate___LogonAccountingServiceSoap2__FindLogonEvents(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerToWhosOn__LogonEvent:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerToWhosOn__LogonEvent(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 WhosOn_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_WhosOn__LogonEvent:
		if (p->size < 0)
			SOAP_DELETE((WhosOn__LogonEvent*)p->ptr);
		else
			SOAP_DELETE_ARRAY((WhosOn__LogonEvent*)p->ptr);
		break;
	case SOAP_TYPE_WhosOn__ArrayOfLogonEvent:
		if (p->size < 0)
			SOAP_DELETE((WhosOn__ArrayOfLogonEvent*)p->ptr);
		else
			SOAP_DELETE_ARRAY((WhosOn__ArrayOfLogonEvent*)p->ptr);
		break;
	case SOAP_TYPE__WhosOn__CreateLogonEvent:
		if (p->size < 0)
			SOAP_DELETE((_WhosOn__CreateLogonEvent*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_WhosOn__CreateLogonEvent*)p->ptr);
		break;
	case SOAP_TYPE__WhosOn__CreateLogonEventResponse:
		if (p->size < 0)
			SOAP_DELETE((_WhosOn__CreateLogonEventResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_WhosOn__CreateLogonEventResponse*)p->ptr);
		break;
	case SOAP_TYPE__WhosOn__CloseLogonEvent:
		if (p->size < 0)
			SOAP_DELETE((_WhosOn__CloseLogonEvent*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_WhosOn__CloseLogonEvent*)p->ptr);
		break;
	case SOAP_TYPE__WhosOn__CloseLogonEventResponse:
		if (p->size < 0)
			SOAP_DELETE((_WhosOn__CloseLogonEventResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_WhosOn__CloseLogonEventResponse*)p->ptr);
		break;
	case SOAP_TYPE__WhosOn__DeleteLogonEvent:
		if (p->size < 0)
			SOAP_DELETE((_WhosOn__DeleteLogonEvent*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_WhosOn__DeleteLogonEvent*)p->ptr);
		break;
	case SOAP_TYPE__WhosOn__DeleteLogonEventResponse:
		if (p->size < 0)
			SOAP_DELETE((_WhosOn__DeleteLogonEventResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_WhosOn__DeleteLogonEventResponse*)p->ptr);
		break;
	case SOAP_TYPE__WhosOn__FindLogonEvent:
		if (p->size < 0)
			SOAP_DELETE((_WhosOn__FindLogonEvent*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_WhosOn__FindLogonEvent*)p->ptr);
		break;
	case SOAP_TYPE__WhosOn__FindLogonEventResponse:
		if (p->size < 0)
			SOAP_DELETE((_WhosOn__FindLogonEventResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_WhosOn__FindLogonEventResponse*)p->ptr);
		break;
	case SOAP_TYPE__WhosOn__FindLogonEvents:
		if (p->size < 0)
			SOAP_DELETE((_WhosOn__FindLogonEvents*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_WhosOn__FindLogonEvents*)p->ptr);
		break;
	case SOAP_TYPE__WhosOn__FindLogonEventsResponse:
		if (p->size < 0)
			SOAP_DELETE((_WhosOn__FindLogonEventsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_WhosOn__FindLogonEventsResponse*)p->ptr);
		break;
	case SOAP_TYPE___LogonAccountingServiceSoap__CreateLogonEvent:
		if (p->size < 0)
			SOAP_DELETE((struct __LogonAccountingServiceSoap__CreateLogonEvent*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __LogonAccountingServiceSoap__CreateLogonEvent*)p->ptr);
		break;
	case SOAP_TYPE___LogonAccountingServiceSoap__CloseLogonEvent:
		if (p->size < 0)
			SOAP_DELETE((struct __LogonAccountingServiceSoap__CloseLogonEvent*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __LogonAccountingServiceSoap__CloseLogonEvent*)p->ptr);
		break;
	case SOAP_TYPE___LogonAccountingServiceSoap__DeleteLogonEvent:
		if (p->size < 0)
			SOAP_DELETE((struct __LogonAccountingServiceSoap__DeleteLogonEvent*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __LogonAccountingServiceSoap__DeleteLogonEvent*)p->ptr);
		break;
	case SOAP_TYPE___LogonAccountingServiceSoap__FindLogonEvent:
		if (p->size < 0)
			SOAP_DELETE((struct __LogonAccountingServiceSoap__FindLogonEvent*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __LogonAccountingServiceSoap__FindLogonEvent*)p->ptr);
		break;
	case SOAP_TYPE___LogonAccountingServiceSoap__FindLogonEvents:
		if (p->size < 0)
			SOAP_DELETE((struct __LogonAccountingServiceSoap__FindLogonEvents*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __LogonAccountingServiceSoap__FindLogonEvents*)p->ptr);
		break;
	case SOAP_TYPE___LogonAccountingServiceSoap2__CreateLogonEvent:
		if (p->size < 0)
			SOAP_DELETE((struct __LogonAccountingServiceSoap2__CreateLogonEvent*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __LogonAccountingServiceSoap2__CreateLogonEvent*)p->ptr);
		break;
	case SOAP_TYPE___LogonAccountingServiceSoap2__CloseLogonEvent:
		if (p->size < 0)
			SOAP_DELETE((struct __LogonAccountingServiceSoap2__CloseLogonEvent*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __LogonAccountingServiceSoap2__CloseLogonEvent*)p->ptr);
		break;
	case SOAP_TYPE___LogonAccountingServiceSoap2__DeleteLogonEvent:
		if (p->size < 0)
			SOAP_DELETE((struct __LogonAccountingServiceSoap2__DeleteLogonEvent*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __LogonAccountingServiceSoap2__DeleteLogonEvent*)p->ptr);
		break;
	case SOAP_TYPE___LogonAccountingServiceSoap2__FindLogonEvent:
		if (p->size < 0)
			SOAP_DELETE((struct __LogonAccountingServiceSoap2__FindLogonEvent*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __LogonAccountingServiceSoap2__FindLogonEvent*)p->ptr);
		break;
	case SOAP_TYPE___LogonAccountingServiceSoap2__FindLogonEvents:
		if (p->size < 0)
			SOAP_DELETE((struct __LogonAccountingServiceSoap2__FindLogonEvents*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __LogonAccountingServiceSoap2__FindLogonEvents*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_std__vectorTemplateOfPointerToWhosOn__LogonEvent:
		if (p->size < 0)
			SOAP_DELETE((std::vector<WhosOn__LogonEvent * >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<WhosOn__LogonEvent * >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, WhosOn_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, WhosOn_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 WhosOn_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfPointerToWhosOn__LogonEvent:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container WhosOn_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<WhosOn__LogonEvent * >*)p)[len] = *(WhosOn__LogonEvent **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_time);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{	time_t *p;
	p = soap_indateTime(soap, tag, a, type, SOAP_TYPE_time);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_time);
	if (soap_out_time(soap, tag?tag:"dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_WhosOn__LogonEventMatch(struct soap *soap, enum WhosOn__LogonEventMatch *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_WhosOn__LogonEventMatch
	*a = SOAP_DEFAULT_WhosOn__LogonEventMatch;
#else
	*a = (enum WhosOn__LogonEventMatch)0;
#endif
}

static const struct soap_code_map soap_codes_WhosOn__LogonEventMatch[] =
{	{ (long)Before, "Before" },
	{ (long)Between, "Between" },
	{ (long)After, "After" },
	{ (long)Exact, "Exact" },
	{ (long)Active, "Active" },
	{ (long)Closed, "Closed" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_WhosOn__LogonEventMatch2s(struct soap *soap, enum WhosOn__LogonEventMatch n)
{	const char *s = soap_code_str(soap_codes_WhosOn__LogonEventMatch, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_WhosOn__LogonEventMatch(struct soap *soap, const char *tag, int id, const enum WhosOn__LogonEventMatch *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WhosOn__LogonEventMatch), type) || soap_send(soap, soap_WhosOn__LogonEventMatch2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2WhosOn__LogonEventMatch(struct soap *soap, const char *s, enum WhosOn__LogonEventMatch *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_WhosOn__LogonEventMatch, s);
	if (map)
		*a = (enum WhosOn__LogonEventMatch)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 5)))
			return soap->error = SOAP_TYPE;
		*a = (enum WhosOn__LogonEventMatch)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum WhosOn__LogonEventMatch * SOAP_FMAC4 soap_in_WhosOn__LogonEventMatch(struct soap *soap, const char *tag, enum WhosOn__LogonEventMatch *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum WhosOn__LogonEventMatch *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_WhosOn__LogonEventMatch, sizeof(enum WhosOn__LogonEventMatch), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2WhosOn__LogonEventMatch(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum WhosOn__LogonEventMatch *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WhosOn__LogonEventMatch, 0, sizeof(enum WhosOn__LogonEventMatch), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_WhosOn__LogonEventMatch(struct soap *soap, const enum WhosOn__LogonEventMatch *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WhosOn__LogonEventMatch);
	if (soap_out_WhosOn__LogonEventMatch(soap, tag?tag:"WhosOn:LogonEventMatch", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum WhosOn__LogonEventMatch * SOAP_FMAC4 soap_get_WhosOn__LogonEventMatch(struct soap *soap, enum WhosOn__LogonEventMatch *p, const char *tag, const char *type)
{
	if ((p = soap_in_WhosOn__LogonEventMatch(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _WhosOn__FindLogonEventsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_WhosOn__FindLogonEventsResponse::FindLogonEventsResult = NULL;
	/* transient soap skipped */
}

void _WhosOn__FindLogonEventsResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToWhosOn__ArrayOfLogonEvent(soap, &this->_WhosOn__FindLogonEventsResponse::FindLogonEventsResult);
	/* transient soap skipped */
#endif
}

int _WhosOn__FindLogonEventsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WhosOn__FindLogonEventsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WhosOn__FindLogonEventsResponse(struct soap *soap, const char *tag, int id, const _WhosOn__FindLogonEventsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WhosOn__FindLogonEventsResponse), type))
		return soap->error;
	if (a->FindLogonEventsResult)
		soap_element_result(soap, "WhosOn:FindLogonEventsResult");
	if (soap_out_PointerToWhosOn__ArrayOfLogonEvent(soap, "WhosOn:FindLogonEventsResult", -1, &(a->_WhosOn__FindLogonEventsResponse::FindLogonEventsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_WhosOn__FindLogonEventsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__WhosOn__FindLogonEventsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _WhosOn__FindLogonEventsResponse * SOAP_FMAC4 soap_in__WhosOn__FindLogonEventsResponse(struct soap *soap, const char *tag, _WhosOn__FindLogonEventsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WhosOn__FindLogonEventsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__WhosOn__FindLogonEventsResponse, sizeof(_WhosOn__FindLogonEventsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__WhosOn__FindLogonEventsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_WhosOn__FindLogonEventsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_FindLogonEventsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_FindLogonEventsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToWhosOn__ArrayOfLogonEvent(soap, "WhosOn:FindLogonEventsResult", &(a->_WhosOn__FindLogonEventsResponse::FindLogonEventsResult), "WhosOn:ArrayOfLogonEvent"))
				{	soap_flag_FindLogonEventsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "WhosOn:FindLogonEventsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WhosOn__FindLogonEventsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WhosOn__FindLogonEventsResponse, 0, sizeof(_WhosOn__FindLogonEventsResponse), 0, soap_copy__WhosOn__FindLogonEventsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _WhosOn__FindLogonEventsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__WhosOn__FindLogonEventsResponse);
	if (this->soap_out(soap, tag?tag:"WhosOn:FindLogonEventsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WhosOn__FindLogonEventsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WhosOn__FindLogonEventsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _WhosOn__FindLogonEventsResponse * SOAP_FMAC4 soap_get__WhosOn__FindLogonEventsResponse(struct soap *soap, _WhosOn__FindLogonEventsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__WhosOn__FindLogonEventsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _WhosOn__FindLogonEventsResponse * SOAP_FMAC2 soap_instantiate__WhosOn__FindLogonEventsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WhosOn__FindLogonEventsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__WhosOn__FindLogonEventsResponse, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_WhosOn__FindLogonEventsResponse);
		if (size)
			*size = sizeof(_WhosOn__FindLogonEventsResponse);
		((_WhosOn__FindLogonEventsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_WhosOn__FindLogonEventsResponse, n);
		if (size)
			*size = n * sizeof(_WhosOn__FindLogonEventsResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_WhosOn__FindLogonEventsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_WhosOn__FindLogonEventsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__WhosOn__FindLogonEventsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _WhosOn__FindLogonEventsResponse %p -> %p\n", q, p));
	*(_WhosOn__FindLogonEventsResponse*)p = *(_WhosOn__FindLogonEventsResponse*)q;
}

void _WhosOn__FindLogonEvents::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_WhosOn__FindLogonEvents::filter = NULL;
	soap_default_WhosOn__LogonEventMatch(soap, &this->_WhosOn__FindLogonEvents::match);
	/* transient soap skipped */
}

void _WhosOn__FindLogonEvents::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToWhosOn__LogonEvent(soap, &this->_WhosOn__FindLogonEvents::filter);
	/* transient soap skipped */
#endif
}

int _WhosOn__FindLogonEvents::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WhosOn__FindLogonEvents(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WhosOn__FindLogonEvents(struct soap *soap, const char *tag, int id, const _WhosOn__FindLogonEvents *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WhosOn__FindLogonEvents), type))
		return soap->error;
	if (a->_WhosOn__FindLogonEvents::filter)
	{	if (soap_out_PointerToWhosOn__LogonEvent(soap, "WhosOn:filter", -1, &a->_WhosOn__FindLogonEvents::filter, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "WhosOn:filter"))
		return soap->error;
	if (soap_out_WhosOn__LogonEventMatch(soap, "WhosOn:match", -1, &(a->_WhosOn__FindLogonEvents::match), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_WhosOn__FindLogonEvents::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__WhosOn__FindLogonEvents(soap, tag, this, type);
}

SOAP_FMAC3 _WhosOn__FindLogonEvents * SOAP_FMAC4 soap_in__WhosOn__FindLogonEvents(struct soap *soap, const char *tag, _WhosOn__FindLogonEvents *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WhosOn__FindLogonEvents *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__WhosOn__FindLogonEvents, sizeof(_WhosOn__FindLogonEvents), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__WhosOn__FindLogonEvents)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_WhosOn__FindLogonEvents *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_filter1 = 1;
	size_t soap_flag_match1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_filter1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToWhosOn__LogonEvent(soap, "WhosOn:filter", &(a->_WhosOn__FindLogonEvents::filter), "WhosOn:LogonEvent"))
				{	soap_flag_filter1--;
					continue;
				}
			if (soap_flag_match1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_WhosOn__LogonEventMatch(soap, "WhosOn:match", &(a->_WhosOn__FindLogonEvents::match), "WhosOn:LogonEventMatch"))
				{	soap_flag_match1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WhosOn__FindLogonEvents *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WhosOn__FindLogonEvents, 0, sizeof(_WhosOn__FindLogonEvents), 0, soap_copy__WhosOn__FindLogonEvents);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_filter1 > 0 || soap_flag_match1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _WhosOn__FindLogonEvents::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__WhosOn__FindLogonEvents);
	if (this->soap_out(soap, tag?tag:"WhosOn:FindLogonEvents", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WhosOn__FindLogonEvents::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WhosOn__FindLogonEvents(soap, this, tag, type);
}

SOAP_FMAC3 _WhosOn__FindLogonEvents * SOAP_FMAC4 soap_get__WhosOn__FindLogonEvents(struct soap *soap, _WhosOn__FindLogonEvents *p, const char *tag, const char *type)
{
	if ((p = soap_in__WhosOn__FindLogonEvents(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _WhosOn__FindLogonEvents * SOAP_FMAC2 soap_instantiate__WhosOn__FindLogonEvents(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WhosOn__FindLogonEvents(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__WhosOn__FindLogonEvents, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_WhosOn__FindLogonEvents);
		if (size)
			*size = sizeof(_WhosOn__FindLogonEvents);
		((_WhosOn__FindLogonEvents*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_WhosOn__FindLogonEvents, n);
		if (size)
			*size = n * sizeof(_WhosOn__FindLogonEvents);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_WhosOn__FindLogonEvents*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_WhosOn__FindLogonEvents*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__WhosOn__FindLogonEvents(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _WhosOn__FindLogonEvents %p -> %p\n", q, p));
	*(_WhosOn__FindLogonEvents*)p = *(_WhosOn__FindLogonEvents*)q;
}

void _WhosOn__FindLogonEventResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_WhosOn__FindLogonEventResponse::FindLogonEventResult = NULL;
	/* transient soap skipped */
}

void _WhosOn__FindLogonEventResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToWhosOn__LogonEvent(soap, &this->_WhosOn__FindLogonEventResponse::FindLogonEventResult);
	/* transient soap skipped */
#endif
}

int _WhosOn__FindLogonEventResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WhosOn__FindLogonEventResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WhosOn__FindLogonEventResponse(struct soap *soap, const char *tag, int id, const _WhosOn__FindLogonEventResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WhosOn__FindLogonEventResponse), type))
		return soap->error;
	if (a->FindLogonEventResult)
		soap_element_result(soap, "WhosOn:FindLogonEventResult");
	if (a->_WhosOn__FindLogonEventResponse::FindLogonEventResult)
	{	if (soap_out_PointerToWhosOn__LogonEvent(soap, "WhosOn:FindLogonEventResult", -1, &a->_WhosOn__FindLogonEventResponse::FindLogonEventResult, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "WhosOn:FindLogonEventResult"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_WhosOn__FindLogonEventResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__WhosOn__FindLogonEventResponse(soap, tag, this, type);
}

SOAP_FMAC3 _WhosOn__FindLogonEventResponse * SOAP_FMAC4 soap_in__WhosOn__FindLogonEventResponse(struct soap *soap, const char *tag, _WhosOn__FindLogonEventResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WhosOn__FindLogonEventResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__WhosOn__FindLogonEventResponse, sizeof(_WhosOn__FindLogonEventResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__WhosOn__FindLogonEventResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_WhosOn__FindLogonEventResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_FindLogonEventResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_FindLogonEventResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToWhosOn__LogonEvent(soap, "WhosOn:FindLogonEventResult", &(a->_WhosOn__FindLogonEventResponse::FindLogonEventResult), "WhosOn:LogonEvent"))
				{	soap_flag_FindLogonEventResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "WhosOn:FindLogonEventResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WhosOn__FindLogonEventResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WhosOn__FindLogonEventResponse, 0, sizeof(_WhosOn__FindLogonEventResponse), 0, soap_copy__WhosOn__FindLogonEventResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_FindLogonEventResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _WhosOn__FindLogonEventResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__WhosOn__FindLogonEventResponse);
	if (this->soap_out(soap, tag?tag:"WhosOn:FindLogonEventResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WhosOn__FindLogonEventResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WhosOn__FindLogonEventResponse(soap, this, tag, type);
}

SOAP_FMAC3 _WhosOn__FindLogonEventResponse * SOAP_FMAC4 soap_get__WhosOn__FindLogonEventResponse(struct soap *soap, _WhosOn__FindLogonEventResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__WhosOn__FindLogonEventResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _WhosOn__FindLogonEventResponse * SOAP_FMAC2 soap_instantiate__WhosOn__FindLogonEventResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WhosOn__FindLogonEventResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__WhosOn__FindLogonEventResponse, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_WhosOn__FindLogonEventResponse);
		if (size)
			*size = sizeof(_WhosOn__FindLogonEventResponse);
		((_WhosOn__FindLogonEventResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_WhosOn__FindLogonEventResponse, n);
		if (size)
			*size = n * sizeof(_WhosOn__FindLogonEventResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_WhosOn__FindLogonEventResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_WhosOn__FindLogonEventResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__WhosOn__FindLogonEventResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _WhosOn__FindLogonEventResponse %p -> %p\n", q, p));
	*(_WhosOn__FindLogonEventResponse*)p = *(_WhosOn__FindLogonEventResponse*)q;
}

void _WhosOn__FindLogonEvent::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_WhosOn__FindLogonEvent::user);
	soap_default_std__string(soap, &this->_WhosOn__FindLogonEvent::domain);
	soap_default_std__string(soap, &this->_WhosOn__FindLogonEvent::computer);
	/* transient soap skipped */
}

void _WhosOn__FindLogonEvent::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_WhosOn__FindLogonEvent::user);
	soap_serialize_std__string(soap, &this->_WhosOn__FindLogonEvent::domain);
	soap_serialize_std__string(soap, &this->_WhosOn__FindLogonEvent::computer);
	/* transient soap skipped */
#endif
}

int _WhosOn__FindLogonEvent::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WhosOn__FindLogonEvent(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WhosOn__FindLogonEvent(struct soap *soap, const char *tag, int id, const _WhosOn__FindLogonEvent *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WhosOn__FindLogonEvent), type))
		return soap->error;
	if (soap_out_std__string(soap, "WhosOn:user", -1, &(a->_WhosOn__FindLogonEvent::user), ""))
		return soap->error;
	if (soap_out_std__string(soap, "WhosOn:domain", -1, &(a->_WhosOn__FindLogonEvent::domain), ""))
		return soap->error;
	if (soap_out_std__string(soap, "WhosOn:computer", -1, &(a->_WhosOn__FindLogonEvent::computer), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_WhosOn__FindLogonEvent::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__WhosOn__FindLogonEvent(soap, tag, this, type);
}

SOAP_FMAC3 _WhosOn__FindLogonEvent * SOAP_FMAC4 soap_in__WhosOn__FindLogonEvent(struct soap *soap, const char *tag, _WhosOn__FindLogonEvent *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WhosOn__FindLogonEvent *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__WhosOn__FindLogonEvent, sizeof(_WhosOn__FindLogonEvent), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__WhosOn__FindLogonEvent)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_WhosOn__FindLogonEvent *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_user1 = 1;
	size_t soap_flag_domain1 = 1;
	size_t soap_flag_computer1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "WhosOn:user", &(a->_WhosOn__FindLogonEvent::user), "xsd:string"))
				{	soap_flag_user1--;
					continue;
				}
			if (soap_flag_domain1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "WhosOn:domain", &(a->_WhosOn__FindLogonEvent::domain), "xsd:string"))
				{	soap_flag_domain1--;
					continue;
				}
			if (soap_flag_computer1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "WhosOn:computer", &(a->_WhosOn__FindLogonEvent::computer), "xsd:string"))
				{	soap_flag_computer1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WhosOn__FindLogonEvent *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WhosOn__FindLogonEvent, 0, sizeof(_WhosOn__FindLogonEvent), 0, soap_copy__WhosOn__FindLogonEvent);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _WhosOn__FindLogonEvent::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__WhosOn__FindLogonEvent);
	if (this->soap_out(soap, tag?tag:"WhosOn:FindLogonEvent", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WhosOn__FindLogonEvent::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WhosOn__FindLogonEvent(soap, this, tag, type);
}

SOAP_FMAC3 _WhosOn__FindLogonEvent * SOAP_FMAC4 soap_get__WhosOn__FindLogonEvent(struct soap *soap, _WhosOn__FindLogonEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in__WhosOn__FindLogonEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _WhosOn__FindLogonEvent * SOAP_FMAC2 soap_instantiate__WhosOn__FindLogonEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WhosOn__FindLogonEvent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__WhosOn__FindLogonEvent, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_WhosOn__FindLogonEvent);
		if (size)
			*size = sizeof(_WhosOn__FindLogonEvent);
		((_WhosOn__FindLogonEvent*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_WhosOn__FindLogonEvent, n);
		if (size)
			*size = n * sizeof(_WhosOn__FindLogonEvent);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_WhosOn__FindLogonEvent*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_WhosOn__FindLogonEvent*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__WhosOn__FindLogonEvent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _WhosOn__FindLogonEvent %p -> %p\n", q, p));
	*(_WhosOn__FindLogonEvent*)p = *(_WhosOn__FindLogonEvent*)q;
}

void _WhosOn__DeleteLogonEventResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _WhosOn__DeleteLogonEventResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _WhosOn__DeleteLogonEventResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WhosOn__DeleteLogonEventResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WhosOn__DeleteLogonEventResponse(struct soap *soap, const char *tag, int id, const _WhosOn__DeleteLogonEventResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WhosOn__DeleteLogonEventResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_WhosOn__DeleteLogonEventResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__WhosOn__DeleteLogonEventResponse(soap, tag, this, type);
}

SOAP_FMAC3 _WhosOn__DeleteLogonEventResponse * SOAP_FMAC4 soap_in__WhosOn__DeleteLogonEventResponse(struct soap *soap, const char *tag, _WhosOn__DeleteLogonEventResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WhosOn__DeleteLogonEventResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__WhosOn__DeleteLogonEventResponse, sizeof(_WhosOn__DeleteLogonEventResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__WhosOn__DeleteLogonEventResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_WhosOn__DeleteLogonEventResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WhosOn__DeleteLogonEventResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WhosOn__DeleteLogonEventResponse, 0, sizeof(_WhosOn__DeleteLogonEventResponse), 0, soap_copy__WhosOn__DeleteLogonEventResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _WhosOn__DeleteLogonEventResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__WhosOn__DeleteLogonEventResponse);
	if (this->soap_out(soap, tag?tag:"WhosOn:DeleteLogonEventResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WhosOn__DeleteLogonEventResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WhosOn__DeleteLogonEventResponse(soap, this, tag, type);
}

SOAP_FMAC3 _WhosOn__DeleteLogonEventResponse * SOAP_FMAC4 soap_get__WhosOn__DeleteLogonEventResponse(struct soap *soap, _WhosOn__DeleteLogonEventResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__WhosOn__DeleteLogonEventResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _WhosOn__DeleteLogonEventResponse * SOAP_FMAC2 soap_instantiate__WhosOn__DeleteLogonEventResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WhosOn__DeleteLogonEventResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__WhosOn__DeleteLogonEventResponse, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_WhosOn__DeleteLogonEventResponse);
		if (size)
			*size = sizeof(_WhosOn__DeleteLogonEventResponse);
		((_WhosOn__DeleteLogonEventResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_WhosOn__DeleteLogonEventResponse, n);
		if (size)
			*size = n * sizeof(_WhosOn__DeleteLogonEventResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_WhosOn__DeleteLogonEventResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_WhosOn__DeleteLogonEventResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__WhosOn__DeleteLogonEventResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _WhosOn__DeleteLogonEventResponse %p -> %p\n", q, p));
	*(_WhosOn__DeleteLogonEventResponse*)p = *(_WhosOn__DeleteLogonEventResponse*)q;
}

void _WhosOn__DeleteLogonEvent::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_WhosOn__DeleteLogonEvent::eventID);
	/* transient soap skipped */
}

void _WhosOn__DeleteLogonEvent::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _WhosOn__DeleteLogonEvent::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WhosOn__DeleteLogonEvent(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WhosOn__DeleteLogonEvent(struct soap *soap, const char *tag, int id, const _WhosOn__DeleteLogonEvent *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WhosOn__DeleteLogonEvent), type))
		return soap->error;
	if (soap_out_int(soap, "WhosOn:eventID", -1, &(a->_WhosOn__DeleteLogonEvent::eventID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_WhosOn__DeleteLogonEvent::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__WhosOn__DeleteLogonEvent(soap, tag, this, type);
}

SOAP_FMAC3 _WhosOn__DeleteLogonEvent * SOAP_FMAC4 soap_in__WhosOn__DeleteLogonEvent(struct soap *soap, const char *tag, _WhosOn__DeleteLogonEvent *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WhosOn__DeleteLogonEvent *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__WhosOn__DeleteLogonEvent, sizeof(_WhosOn__DeleteLogonEvent), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__WhosOn__DeleteLogonEvent)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_WhosOn__DeleteLogonEvent *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_eventID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_eventID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "WhosOn:eventID", &(a->_WhosOn__DeleteLogonEvent::eventID), "xsd:int"))
				{	soap_flag_eventID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WhosOn__DeleteLogonEvent *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WhosOn__DeleteLogonEvent, 0, sizeof(_WhosOn__DeleteLogonEvent), 0, soap_copy__WhosOn__DeleteLogonEvent);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_eventID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _WhosOn__DeleteLogonEvent::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__WhosOn__DeleteLogonEvent);
	if (this->soap_out(soap, tag?tag:"WhosOn:DeleteLogonEvent", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WhosOn__DeleteLogonEvent::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WhosOn__DeleteLogonEvent(soap, this, tag, type);
}

SOAP_FMAC3 _WhosOn__DeleteLogonEvent * SOAP_FMAC4 soap_get__WhosOn__DeleteLogonEvent(struct soap *soap, _WhosOn__DeleteLogonEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in__WhosOn__DeleteLogonEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _WhosOn__DeleteLogonEvent * SOAP_FMAC2 soap_instantiate__WhosOn__DeleteLogonEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WhosOn__DeleteLogonEvent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__WhosOn__DeleteLogonEvent, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_WhosOn__DeleteLogonEvent);
		if (size)
			*size = sizeof(_WhosOn__DeleteLogonEvent);
		((_WhosOn__DeleteLogonEvent*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_WhosOn__DeleteLogonEvent, n);
		if (size)
			*size = n * sizeof(_WhosOn__DeleteLogonEvent);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_WhosOn__DeleteLogonEvent*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_WhosOn__DeleteLogonEvent*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__WhosOn__DeleteLogonEvent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _WhosOn__DeleteLogonEvent %p -> %p\n", q, p));
	*(_WhosOn__DeleteLogonEvent*)p = *(_WhosOn__DeleteLogonEvent*)q;
}

void _WhosOn__CloseLogonEventResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _WhosOn__CloseLogonEventResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _WhosOn__CloseLogonEventResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WhosOn__CloseLogonEventResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WhosOn__CloseLogonEventResponse(struct soap *soap, const char *tag, int id, const _WhosOn__CloseLogonEventResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WhosOn__CloseLogonEventResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_WhosOn__CloseLogonEventResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__WhosOn__CloseLogonEventResponse(soap, tag, this, type);
}

SOAP_FMAC3 _WhosOn__CloseLogonEventResponse * SOAP_FMAC4 soap_in__WhosOn__CloseLogonEventResponse(struct soap *soap, const char *tag, _WhosOn__CloseLogonEventResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WhosOn__CloseLogonEventResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__WhosOn__CloseLogonEventResponse, sizeof(_WhosOn__CloseLogonEventResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__WhosOn__CloseLogonEventResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_WhosOn__CloseLogonEventResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WhosOn__CloseLogonEventResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WhosOn__CloseLogonEventResponse, 0, sizeof(_WhosOn__CloseLogonEventResponse), 0, soap_copy__WhosOn__CloseLogonEventResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _WhosOn__CloseLogonEventResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__WhosOn__CloseLogonEventResponse);
	if (this->soap_out(soap, tag?tag:"WhosOn:CloseLogonEventResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WhosOn__CloseLogonEventResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WhosOn__CloseLogonEventResponse(soap, this, tag, type);
}

SOAP_FMAC3 _WhosOn__CloseLogonEventResponse * SOAP_FMAC4 soap_get__WhosOn__CloseLogonEventResponse(struct soap *soap, _WhosOn__CloseLogonEventResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__WhosOn__CloseLogonEventResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _WhosOn__CloseLogonEventResponse * SOAP_FMAC2 soap_instantiate__WhosOn__CloseLogonEventResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WhosOn__CloseLogonEventResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__WhosOn__CloseLogonEventResponse, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_WhosOn__CloseLogonEventResponse);
		if (size)
			*size = sizeof(_WhosOn__CloseLogonEventResponse);
		((_WhosOn__CloseLogonEventResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_WhosOn__CloseLogonEventResponse, n);
		if (size)
			*size = n * sizeof(_WhosOn__CloseLogonEventResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_WhosOn__CloseLogonEventResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_WhosOn__CloseLogonEventResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__WhosOn__CloseLogonEventResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _WhosOn__CloseLogonEventResponse %p -> %p\n", q, p));
	*(_WhosOn__CloseLogonEventResponse*)p = *(_WhosOn__CloseLogonEventResponse*)q;
}

void _WhosOn__CloseLogonEvent::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_WhosOn__CloseLogonEvent::eventID);
	/* transient soap skipped */
}

void _WhosOn__CloseLogonEvent::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _WhosOn__CloseLogonEvent::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WhosOn__CloseLogonEvent(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WhosOn__CloseLogonEvent(struct soap *soap, const char *tag, int id, const _WhosOn__CloseLogonEvent *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WhosOn__CloseLogonEvent), type))
		return soap->error;
	if (soap_out_int(soap, "WhosOn:eventID", -1, &(a->_WhosOn__CloseLogonEvent::eventID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_WhosOn__CloseLogonEvent::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__WhosOn__CloseLogonEvent(soap, tag, this, type);
}

SOAP_FMAC3 _WhosOn__CloseLogonEvent * SOAP_FMAC4 soap_in__WhosOn__CloseLogonEvent(struct soap *soap, const char *tag, _WhosOn__CloseLogonEvent *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WhosOn__CloseLogonEvent *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__WhosOn__CloseLogonEvent, sizeof(_WhosOn__CloseLogonEvent), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__WhosOn__CloseLogonEvent)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_WhosOn__CloseLogonEvent *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_eventID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_eventID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "WhosOn:eventID", &(a->_WhosOn__CloseLogonEvent::eventID), "xsd:int"))
				{	soap_flag_eventID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WhosOn__CloseLogonEvent *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WhosOn__CloseLogonEvent, 0, sizeof(_WhosOn__CloseLogonEvent), 0, soap_copy__WhosOn__CloseLogonEvent);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_eventID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _WhosOn__CloseLogonEvent::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__WhosOn__CloseLogonEvent);
	if (this->soap_out(soap, tag?tag:"WhosOn:CloseLogonEvent", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WhosOn__CloseLogonEvent::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WhosOn__CloseLogonEvent(soap, this, tag, type);
}

SOAP_FMAC3 _WhosOn__CloseLogonEvent * SOAP_FMAC4 soap_get__WhosOn__CloseLogonEvent(struct soap *soap, _WhosOn__CloseLogonEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in__WhosOn__CloseLogonEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _WhosOn__CloseLogonEvent * SOAP_FMAC2 soap_instantiate__WhosOn__CloseLogonEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WhosOn__CloseLogonEvent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__WhosOn__CloseLogonEvent, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_WhosOn__CloseLogonEvent);
		if (size)
			*size = sizeof(_WhosOn__CloseLogonEvent);
		((_WhosOn__CloseLogonEvent*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_WhosOn__CloseLogonEvent, n);
		if (size)
			*size = n * sizeof(_WhosOn__CloseLogonEvent);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_WhosOn__CloseLogonEvent*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_WhosOn__CloseLogonEvent*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__WhosOn__CloseLogonEvent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _WhosOn__CloseLogonEvent %p -> %p\n", q, p));
	*(_WhosOn__CloseLogonEvent*)p = *(_WhosOn__CloseLogonEvent*)q;
}

void _WhosOn__CreateLogonEventResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_WhosOn__CreateLogonEventResponse::CreateLogonEventResult);
	/* transient soap skipped */
}

void _WhosOn__CreateLogonEventResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _WhosOn__CreateLogonEventResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WhosOn__CreateLogonEventResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WhosOn__CreateLogonEventResponse(struct soap *soap, const char *tag, int id, const _WhosOn__CreateLogonEventResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WhosOn__CreateLogonEventResponse), type))
		return soap->error;
	soap_element_result(soap, "WhosOn:CreateLogonEventResult");
	if (soap_out_int(soap, "WhosOn:CreateLogonEventResult", -1, &(a->_WhosOn__CreateLogonEventResponse::CreateLogonEventResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_WhosOn__CreateLogonEventResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__WhosOn__CreateLogonEventResponse(soap, tag, this, type);
}

SOAP_FMAC3 _WhosOn__CreateLogonEventResponse * SOAP_FMAC4 soap_in__WhosOn__CreateLogonEventResponse(struct soap *soap, const char *tag, _WhosOn__CreateLogonEventResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WhosOn__CreateLogonEventResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__WhosOn__CreateLogonEventResponse, sizeof(_WhosOn__CreateLogonEventResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__WhosOn__CreateLogonEventResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_WhosOn__CreateLogonEventResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CreateLogonEventResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CreateLogonEventResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "WhosOn:CreateLogonEventResult", &(a->_WhosOn__CreateLogonEventResponse::CreateLogonEventResult), "xsd:int"))
				{	soap_flag_CreateLogonEventResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "WhosOn:CreateLogonEventResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WhosOn__CreateLogonEventResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WhosOn__CreateLogonEventResponse, 0, sizeof(_WhosOn__CreateLogonEventResponse), 0, soap_copy__WhosOn__CreateLogonEventResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_CreateLogonEventResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _WhosOn__CreateLogonEventResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__WhosOn__CreateLogonEventResponse);
	if (this->soap_out(soap, tag?tag:"WhosOn:CreateLogonEventResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WhosOn__CreateLogonEventResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WhosOn__CreateLogonEventResponse(soap, this, tag, type);
}

SOAP_FMAC3 _WhosOn__CreateLogonEventResponse * SOAP_FMAC4 soap_get__WhosOn__CreateLogonEventResponse(struct soap *soap, _WhosOn__CreateLogonEventResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__WhosOn__CreateLogonEventResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _WhosOn__CreateLogonEventResponse * SOAP_FMAC2 soap_instantiate__WhosOn__CreateLogonEventResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WhosOn__CreateLogonEventResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__WhosOn__CreateLogonEventResponse, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_WhosOn__CreateLogonEventResponse);
		if (size)
			*size = sizeof(_WhosOn__CreateLogonEventResponse);
		((_WhosOn__CreateLogonEventResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_WhosOn__CreateLogonEventResponse, n);
		if (size)
			*size = n * sizeof(_WhosOn__CreateLogonEventResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_WhosOn__CreateLogonEventResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_WhosOn__CreateLogonEventResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__WhosOn__CreateLogonEventResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _WhosOn__CreateLogonEventResponse %p -> %p\n", q, p));
	*(_WhosOn__CreateLogonEventResponse*)p = *(_WhosOn__CreateLogonEventResponse*)q;
}

void _WhosOn__CreateLogonEvent::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_WhosOn__CreateLogonEvent::user);
	soap_default_std__string(soap, &this->_WhosOn__CreateLogonEvent::domain);
	soap_default_std__string(soap, &this->_WhosOn__CreateLogonEvent::computer);
	soap_default_std__string(soap, &this->_WhosOn__CreateLogonEvent::hwaddr);
	/* transient soap skipped */
}

void _WhosOn__CreateLogonEvent::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_WhosOn__CreateLogonEvent::user);
	soap_serialize_std__string(soap, &this->_WhosOn__CreateLogonEvent::domain);
	soap_serialize_std__string(soap, &this->_WhosOn__CreateLogonEvent::computer);
	soap_serialize_std__string(soap, &this->_WhosOn__CreateLogonEvent::hwaddr);
	/* transient soap skipped */
#endif
}

int _WhosOn__CreateLogonEvent::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__WhosOn__CreateLogonEvent(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__WhosOn__CreateLogonEvent(struct soap *soap, const char *tag, int id, const _WhosOn__CreateLogonEvent *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__WhosOn__CreateLogonEvent), type))
		return soap->error;
	if (soap_out_std__string(soap, "WhosOn:user", -1, &(a->_WhosOn__CreateLogonEvent::user), ""))
		return soap->error;
	if (soap_out_std__string(soap, "WhosOn:domain", -1, &(a->_WhosOn__CreateLogonEvent::domain), ""))
		return soap->error;
	if (soap_out_std__string(soap, "WhosOn:computer", -1, &(a->_WhosOn__CreateLogonEvent::computer), ""))
		return soap->error;
	if (soap_out_std__string(soap, "WhosOn:hwaddr", -1, &(a->_WhosOn__CreateLogonEvent::hwaddr), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_WhosOn__CreateLogonEvent::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__WhosOn__CreateLogonEvent(soap, tag, this, type);
}

SOAP_FMAC3 _WhosOn__CreateLogonEvent * SOAP_FMAC4 soap_in__WhosOn__CreateLogonEvent(struct soap *soap, const char *tag, _WhosOn__CreateLogonEvent *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_WhosOn__CreateLogonEvent *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__WhosOn__CreateLogonEvent, sizeof(_WhosOn__CreateLogonEvent), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__WhosOn__CreateLogonEvent)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_WhosOn__CreateLogonEvent *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_user1 = 1;
	size_t soap_flag_domain1 = 1;
	size_t soap_flag_computer1 = 1;
	size_t soap_flag_hwaddr1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_user1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "WhosOn:user", &(a->_WhosOn__CreateLogonEvent::user), "xsd:string"))
				{	soap_flag_user1--;
					continue;
				}
			if (soap_flag_domain1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "WhosOn:domain", &(a->_WhosOn__CreateLogonEvent::domain), "xsd:string"))
				{	soap_flag_domain1--;
					continue;
				}
			if (soap_flag_computer1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "WhosOn:computer", &(a->_WhosOn__CreateLogonEvent::computer), "xsd:string"))
				{	soap_flag_computer1--;
					continue;
				}
			if (soap_flag_hwaddr1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "WhosOn:hwaddr", &(a->_WhosOn__CreateLogonEvent::hwaddr), "xsd:string"))
				{	soap_flag_hwaddr1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_WhosOn__CreateLogonEvent *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__WhosOn__CreateLogonEvent, 0, sizeof(_WhosOn__CreateLogonEvent), 0, soap_copy__WhosOn__CreateLogonEvent);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _WhosOn__CreateLogonEvent::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__WhosOn__CreateLogonEvent);
	if (this->soap_out(soap, tag?tag:"WhosOn:CreateLogonEvent", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_WhosOn__CreateLogonEvent::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__WhosOn__CreateLogonEvent(soap, this, tag, type);
}

SOAP_FMAC3 _WhosOn__CreateLogonEvent * SOAP_FMAC4 soap_get__WhosOn__CreateLogonEvent(struct soap *soap, _WhosOn__CreateLogonEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in__WhosOn__CreateLogonEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _WhosOn__CreateLogonEvent * SOAP_FMAC2 soap_instantiate__WhosOn__CreateLogonEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__WhosOn__CreateLogonEvent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__WhosOn__CreateLogonEvent, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_WhosOn__CreateLogonEvent);
		if (size)
			*size = sizeof(_WhosOn__CreateLogonEvent);
		((_WhosOn__CreateLogonEvent*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_WhosOn__CreateLogonEvent, n);
		if (size)
			*size = n * sizeof(_WhosOn__CreateLogonEvent);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_WhosOn__CreateLogonEvent*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_WhosOn__CreateLogonEvent*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__WhosOn__CreateLogonEvent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _WhosOn__CreateLogonEvent %p -> %p\n", q, p));
	*(_WhosOn__CreateLogonEvent*)p = *(_WhosOn__CreateLogonEvent*)q;
}

void WhosOn__ArrayOfLogonEvent::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerToWhosOn__LogonEvent(soap, &this->WhosOn__ArrayOfLogonEvent::LogonEvent);
	/* transient soap skipped */
}

void WhosOn__ArrayOfLogonEvent::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerToWhosOn__LogonEvent(soap, &this->WhosOn__ArrayOfLogonEvent::LogonEvent);
	/* transient soap skipped */
#endif
}

int WhosOn__ArrayOfLogonEvent::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_WhosOn__ArrayOfLogonEvent(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_WhosOn__ArrayOfLogonEvent(struct soap *soap, const char *tag, int id, const WhosOn__ArrayOfLogonEvent *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WhosOn__ArrayOfLogonEvent), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerToWhosOn__LogonEvent(soap, "WhosOn:LogonEvent", -1, &(a->WhosOn__ArrayOfLogonEvent::LogonEvent), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *WhosOn__ArrayOfLogonEvent::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_WhosOn__ArrayOfLogonEvent(soap, tag, this, type);
}

SOAP_FMAC3 WhosOn__ArrayOfLogonEvent * SOAP_FMAC4 soap_in_WhosOn__ArrayOfLogonEvent(struct soap *soap, const char *tag, WhosOn__ArrayOfLogonEvent *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (WhosOn__ArrayOfLogonEvent *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WhosOn__ArrayOfLogonEvent, sizeof(WhosOn__ArrayOfLogonEvent), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WhosOn__ArrayOfLogonEvent)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (WhosOn__ArrayOfLogonEvent *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerToWhosOn__LogonEvent(soap, "WhosOn:LogonEvent", &(a->WhosOn__ArrayOfLogonEvent::LogonEvent), "WhosOn:LogonEvent"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (WhosOn__ArrayOfLogonEvent *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WhosOn__ArrayOfLogonEvent, 0, sizeof(WhosOn__ArrayOfLogonEvent), 0, soap_copy_WhosOn__ArrayOfLogonEvent);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int WhosOn__ArrayOfLogonEvent::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WhosOn__ArrayOfLogonEvent);
	if (this->soap_out(soap, tag?tag:"WhosOn:ArrayOfLogonEvent", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *WhosOn__ArrayOfLogonEvent::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_WhosOn__ArrayOfLogonEvent(soap, this, tag, type);
}

SOAP_FMAC3 WhosOn__ArrayOfLogonEvent * SOAP_FMAC4 soap_get_WhosOn__ArrayOfLogonEvent(struct soap *soap, WhosOn__ArrayOfLogonEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in_WhosOn__ArrayOfLogonEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 WhosOn__ArrayOfLogonEvent * SOAP_FMAC2 soap_instantiate_WhosOn__ArrayOfLogonEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_WhosOn__ArrayOfLogonEvent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WhosOn__ArrayOfLogonEvent, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(WhosOn__ArrayOfLogonEvent);
		if (size)
			*size = sizeof(WhosOn__ArrayOfLogonEvent);
		((WhosOn__ArrayOfLogonEvent*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(WhosOn__ArrayOfLogonEvent, n);
		if (size)
			*size = n * sizeof(WhosOn__ArrayOfLogonEvent);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((WhosOn__ArrayOfLogonEvent*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (WhosOn__ArrayOfLogonEvent*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_WhosOn__ArrayOfLogonEvent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying WhosOn__ArrayOfLogonEvent %p -> %p\n", q, p));
	*(WhosOn__ArrayOfLogonEvent*)p = *(WhosOn__ArrayOfLogonEvent*)q;
}

void WhosOn__LogonEvent::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->WhosOn__LogonEvent::EventID);
	soap_default_std__string(soap, &this->WhosOn__LogonEvent::Username);
	soap_default_std__string(soap, &this->WhosOn__LogonEvent::Domain);
	soap_default_std__string(soap, &this->WhosOn__LogonEvent::HwAddress);
	soap_default_std__string(soap, &this->WhosOn__LogonEvent::IpAddress);
	soap_default_std__string(soap, &this->WhosOn__LogonEvent::Hostname);
	soap_default_std__string(soap, &this->WhosOn__LogonEvent::Workstation);
	soap_default_time(soap, &this->WhosOn__LogonEvent::StartTime);
	soap_default_time(soap, &this->WhosOn__LogonEvent::EndTime);
	soap_default_int(soap, &this->WhosOn__LogonEvent::FirstID);
	soap_default_int(soap, &this->WhosOn__LogonEvent::LastID);
	soap_default_int(soap, &this->WhosOn__LogonEvent::Limit);
	/* transient soap skipped */
}

void WhosOn__LogonEvent::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->WhosOn__LogonEvent::Username);
	soap_serialize_std__string(soap, &this->WhosOn__LogonEvent::Domain);
	soap_serialize_std__string(soap, &this->WhosOn__LogonEvent::HwAddress);
	soap_serialize_std__string(soap, &this->WhosOn__LogonEvent::IpAddress);
	soap_serialize_std__string(soap, &this->WhosOn__LogonEvent::Hostname);
	soap_serialize_std__string(soap, &this->WhosOn__LogonEvent::Workstation);
	/* transient soap skipped */
#endif
}

int WhosOn__LogonEvent::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_WhosOn__LogonEvent(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_WhosOn__LogonEvent(struct soap *soap, const char *tag, int id, const WhosOn__LogonEvent *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WhosOn__LogonEvent), type))
		return soap->error;
	if (soap_out_int(soap, "WhosOn:EventID", -1, &(a->WhosOn__LogonEvent::EventID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "WhosOn:Username", -1, &(a->WhosOn__LogonEvent::Username), ""))
		return soap->error;
	if (soap_out_std__string(soap, "WhosOn:Domain", -1, &(a->WhosOn__LogonEvent::Domain), ""))
		return soap->error;
	if (soap_out_std__string(soap, "WhosOn:HwAddress", -1, &(a->WhosOn__LogonEvent::HwAddress), ""))
		return soap->error;
	if (soap_out_std__string(soap, "WhosOn:IpAddress", -1, &(a->WhosOn__LogonEvent::IpAddress), ""))
		return soap->error;
	if (soap_out_std__string(soap, "WhosOn:Hostname", -1, &(a->WhosOn__LogonEvent::Hostname), ""))
		return soap->error;
	if (soap_out_std__string(soap, "WhosOn:Workstation", -1, &(a->WhosOn__LogonEvent::Workstation), ""))
		return soap->error;
	if (soap_out_time(soap, "WhosOn:StartTime", -1, &(a->WhosOn__LogonEvent::StartTime), ""))
		return soap->error;
	if (soap_out_time(soap, "WhosOn:EndTime", -1, &(a->WhosOn__LogonEvent::EndTime), ""))
		return soap->error;
	if (soap_out_int(soap, "WhosOn:FirstID", -1, &(a->WhosOn__LogonEvent::FirstID), ""))
		return soap->error;
	if (soap_out_int(soap, "WhosOn:LastID", -1, &(a->WhosOn__LogonEvent::LastID), ""))
		return soap->error;
	if (soap_out_int(soap, "WhosOn:Limit", -1, &(a->WhosOn__LogonEvent::Limit), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *WhosOn__LogonEvent::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_WhosOn__LogonEvent(soap, tag, this, type);
}

SOAP_FMAC3 WhosOn__LogonEvent * SOAP_FMAC4 soap_in_WhosOn__LogonEvent(struct soap *soap, const char *tag, WhosOn__LogonEvent *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (WhosOn__LogonEvent *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WhosOn__LogonEvent, sizeof(WhosOn__LogonEvent), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WhosOn__LogonEvent)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (WhosOn__LogonEvent *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_EventID1 = 1;
	size_t soap_flag_Username1 = 1;
	size_t soap_flag_Domain1 = 1;
	size_t soap_flag_HwAddress1 = 1;
	size_t soap_flag_IpAddress1 = 1;
	size_t soap_flag_Hostname1 = 1;
	size_t soap_flag_Workstation1 = 1;
	size_t soap_flag_StartTime1 = 1;
	size_t soap_flag_EndTime1 = 1;
	size_t soap_flag_FirstID1 = 1;
	size_t soap_flag_LastID1 = 1;
	size_t soap_flag_Limit1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_EventID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "WhosOn:EventID", &(a->WhosOn__LogonEvent::EventID), "xsd:int"))
				{	soap_flag_EventID1--;
					continue;
				}
			if (soap_flag_Username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "WhosOn:Username", &(a->WhosOn__LogonEvent::Username), "xsd:string"))
				{	soap_flag_Username1--;
					continue;
				}
			if (soap_flag_Domain1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "WhosOn:Domain", &(a->WhosOn__LogonEvent::Domain), "xsd:string"))
				{	soap_flag_Domain1--;
					continue;
				}
			if (soap_flag_HwAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "WhosOn:HwAddress", &(a->WhosOn__LogonEvent::HwAddress), "xsd:string"))
				{	soap_flag_HwAddress1--;
					continue;
				}
			if (soap_flag_IpAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "WhosOn:IpAddress", &(a->WhosOn__LogonEvent::IpAddress), "xsd:string"))
				{	soap_flag_IpAddress1--;
					continue;
				}
			if (soap_flag_Hostname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "WhosOn:Hostname", &(a->WhosOn__LogonEvent::Hostname), "xsd:string"))
				{	soap_flag_Hostname1--;
					continue;
				}
			if (soap_flag_Workstation1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "WhosOn:Workstation", &(a->WhosOn__LogonEvent::Workstation), "xsd:string"))
				{	soap_flag_Workstation1--;
					continue;
				}
			if (soap_flag_StartTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "WhosOn:StartTime", &(a->WhosOn__LogonEvent::StartTime), "xsd:dateTime"))
				{	soap_flag_StartTime1--;
					continue;
				}
			if (soap_flag_EndTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "WhosOn:EndTime", &(a->WhosOn__LogonEvent::EndTime), "xsd:dateTime"))
				{	soap_flag_EndTime1--;
					continue;
				}
			if (soap_flag_FirstID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "WhosOn:FirstID", &(a->WhosOn__LogonEvent::FirstID), "xsd:int"))
				{	soap_flag_FirstID1--;
					continue;
				}
			if (soap_flag_LastID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "WhosOn:LastID", &(a->WhosOn__LogonEvent::LastID), "xsd:int"))
				{	soap_flag_LastID1--;
					continue;
				}
			if (soap_flag_Limit1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "WhosOn:Limit", &(a->WhosOn__LogonEvent::Limit), "xsd:int"))
				{	soap_flag_Limit1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (WhosOn__LogonEvent *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WhosOn__LogonEvent, 0, sizeof(WhosOn__LogonEvent), 0, soap_copy_WhosOn__LogonEvent);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_EventID1 > 0 || soap_flag_StartTime1 > 0 || soap_flag_EndTime1 > 0 || soap_flag_FirstID1 > 0 || soap_flag_LastID1 > 0 || soap_flag_Limit1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int WhosOn__LogonEvent::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WhosOn__LogonEvent);
	if (this->soap_out(soap, tag?tag:"WhosOn:LogonEvent", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *WhosOn__LogonEvent::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_WhosOn__LogonEvent(soap, this, tag, type);
}

SOAP_FMAC3 WhosOn__LogonEvent * SOAP_FMAC4 soap_get_WhosOn__LogonEvent(struct soap *soap, WhosOn__LogonEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in_WhosOn__LogonEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 WhosOn__LogonEvent * SOAP_FMAC2 soap_instantiate_WhosOn__LogonEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_WhosOn__LogonEvent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WhosOn__LogonEvent, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(WhosOn__LogonEvent);
		if (size)
			*size = sizeof(WhosOn__LogonEvent);
		((WhosOn__LogonEvent*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(WhosOn__LogonEvent, n);
		if (size)
			*size = n * sizeof(WhosOn__LogonEvent);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((WhosOn__LogonEvent*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (WhosOn__LogonEvent*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_WhosOn__LogonEvent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying WhosOn__LogonEvent %p -> %p\n", q, p));
	*(WhosOn__LogonEvent*)p = *(WhosOn__LogonEvent*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___LogonAccountingServiceSoap2__FindLogonEvents(struct soap *soap, struct __LogonAccountingServiceSoap2__FindLogonEvents *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WhosOn__FindLogonEvents = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___LogonAccountingServiceSoap2__FindLogonEvents(struct soap *soap, const struct __LogonAccountingServiceSoap2__FindLogonEvents *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_WhosOn__FindLogonEvents(soap, &a->WhosOn__FindLogonEvents);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___LogonAccountingServiceSoap2__FindLogonEvents(struct soap *soap, const char *tag, int id, const struct __LogonAccountingServiceSoap2__FindLogonEvents *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_WhosOn__FindLogonEvents(soap, "WhosOn:FindLogonEvents", -1, &a->WhosOn__FindLogonEvents, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __LogonAccountingServiceSoap2__FindLogonEvents * SOAP_FMAC4 soap_in___LogonAccountingServiceSoap2__FindLogonEvents(struct soap *soap, const char *tag, struct __LogonAccountingServiceSoap2__FindLogonEvents *a, const char *type)
{
	size_t soap_flag_WhosOn__FindLogonEvents = 1;
	short soap_flag;
	a = (struct __LogonAccountingServiceSoap2__FindLogonEvents *)soap_id_enter(soap, "", a, SOAP_TYPE___LogonAccountingServiceSoap2__FindLogonEvents, sizeof(struct __LogonAccountingServiceSoap2__FindLogonEvents), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___LogonAccountingServiceSoap2__FindLogonEvents(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WhosOn__FindLogonEvents && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_WhosOn__FindLogonEvents(soap, "WhosOn:FindLogonEvents", &a->WhosOn__FindLogonEvents, ""))
				{	soap_flag_WhosOn__FindLogonEvents--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___LogonAccountingServiceSoap2__FindLogonEvents(struct soap *soap, const struct __LogonAccountingServiceSoap2__FindLogonEvents *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___LogonAccountingServiceSoap2__FindLogonEvents(soap, tag?tag:"-LogonAccountingServiceSoap2:FindLogonEvents", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __LogonAccountingServiceSoap2__FindLogonEvents * SOAP_FMAC4 soap_get___LogonAccountingServiceSoap2__FindLogonEvents(struct soap *soap, struct __LogonAccountingServiceSoap2__FindLogonEvents *p, const char *tag, const char *type)
{
	if ((p = soap_in___LogonAccountingServiceSoap2__FindLogonEvents(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __LogonAccountingServiceSoap2__FindLogonEvents * SOAP_FMAC2 soap_instantiate___LogonAccountingServiceSoap2__FindLogonEvents(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___LogonAccountingServiceSoap2__FindLogonEvents(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___LogonAccountingServiceSoap2__FindLogonEvents, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __LogonAccountingServiceSoap2__FindLogonEvents);
		if (size)
			*size = sizeof(struct __LogonAccountingServiceSoap2__FindLogonEvents);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __LogonAccountingServiceSoap2__FindLogonEvents, n);
		if (size)
			*size = n * sizeof(struct __LogonAccountingServiceSoap2__FindLogonEvents);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __LogonAccountingServiceSoap2__FindLogonEvents*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___LogonAccountingServiceSoap2__FindLogonEvents(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __LogonAccountingServiceSoap2__FindLogonEvents %p -> %p\n", q, p));
	*(struct __LogonAccountingServiceSoap2__FindLogonEvents*)p = *(struct __LogonAccountingServiceSoap2__FindLogonEvents*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___LogonAccountingServiceSoap2__FindLogonEvent(struct soap *soap, struct __LogonAccountingServiceSoap2__FindLogonEvent *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WhosOn__FindLogonEvent = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___LogonAccountingServiceSoap2__FindLogonEvent(struct soap *soap, const struct __LogonAccountingServiceSoap2__FindLogonEvent *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_WhosOn__FindLogonEvent(soap, &a->WhosOn__FindLogonEvent);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___LogonAccountingServiceSoap2__FindLogonEvent(struct soap *soap, const char *tag, int id, const struct __LogonAccountingServiceSoap2__FindLogonEvent *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_WhosOn__FindLogonEvent(soap, "WhosOn:FindLogonEvent", -1, &a->WhosOn__FindLogonEvent, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __LogonAccountingServiceSoap2__FindLogonEvent * SOAP_FMAC4 soap_in___LogonAccountingServiceSoap2__FindLogonEvent(struct soap *soap, const char *tag, struct __LogonAccountingServiceSoap2__FindLogonEvent *a, const char *type)
{
	size_t soap_flag_WhosOn__FindLogonEvent = 1;
	short soap_flag;
	a = (struct __LogonAccountingServiceSoap2__FindLogonEvent *)soap_id_enter(soap, "", a, SOAP_TYPE___LogonAccountingServiceSoap2__FindLogonEvent, sizeof(struct __LogonAccountingServiceSoap2__FindLogonEvent), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___LogonAccountingServiceSoap2__FindLogonEvent(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WhosOn__FindLogonEvent && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_WhosOn__FindLogonEvent(soap, "WhosOn:FindLogonEvent", &a->WhosOn__FindLogonEvent, ""))
				{	soap_flag_WhosOn__FindLogonEvent--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___LogonAccountingServiceSoap2__FindLogonEvent(struct soap *soap, const struct __LogonAccountingServiceSoap2__FindLogonEvent *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___LogonAccountingServiceSoap2__FindLogonEvent(soap, tag?tag:"-LogonAccountingServiceSoap2:FindLogonEvent", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __LogonAccountingServiceSoap2__FindLogonEvent * SOAP_FMAC4 soap_get___LogonAccountingServiceSoap2__FindLogonEvent(struct soap *soap, struct __LogonAccountingServiceSoap2__FindLogonEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in___LogonAccountingServiceSoap2__FindLogonEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __LogonAccountingServiceSoap2__FindLogonEvent * SOAP_FMAC2 soap_instantiate___LogonAccountingServiceSoap2__FindLogonEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___LogonAccountingServiceSoap2__FindLogonEvent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___LogonAccountingServiceSoap2__FindLogonEvent, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __LogonAccountingServiceSoap2__FindLogonEvent);
		if (size)
			*size = sizeof(struct __LogonAccountingServiceSoap2__FindLogonEvent);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __LogonAccountingServiceSoap2__FindLogonEvent, n);
		if (size)
			*size = n * sizeof(struct __LogonAccountingServiceSoap2__FindLogonEvent);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __LogonAccountingServiceSoap2__FindLogonEvent*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___LogonAccountingServiceSoap2__FindLogonEvent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __LogonAccountingServiceSoap2__FindLogonEvent %p -> %p\n", q, p));
	*(struct __LogonAccountingServiceSoap2__FindLogonEvent*)p = *(struct __LogonAccountingServiceSoap2__FindLogonEvent*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___LogonAccountingServiceSoap2__DeleteLogonEvent(struct soap *soap, struct __LogonAccountingServiceSoap2__DeleteLogonEvent *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WhosOn__DeleteLogonEvent = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___LogonAccountingServiceSoap2__DeleteLogonEvent(struct soap *soap, const struct __LogonAccountingServiceSoap2__DeleteLogonEvent *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_WhosOn__DeleteLogonEvent(soap, &a->WhosOn__DeleteLogonEvent);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___LogonAccountingServiceSoap2__DeleteLogonEvent(struct soap *soap, const char *tag, int id, const struct __LogonAccountingServiceSoap2__DeleteLogonEvent *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_WhosOn__DeleteLogonEvent(soap, "WhosOn:DeleteLogonEvent", -1, &a->WhosOn__DeleteLogonEvent, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __LogonAccountingServiceSoap2__DeleteLogonEvent * SOAP_FMAC4 soap_in___LogonAccountingServiceSoap2__DeleteLogonEvent(struct soap *soap, const char *tag, struct __LogonAccountingServiceSoap2__DeleteLogonEvent *a, const char *type)
{
	size_t soap_flag_WhosOn__DeleteLogonEvent = 1;
	short soap_flag;
	a = (struct __LogonAccountingServiceSoap2__DeleteLogonEvent *)soap_id_enter(soap, "", a, SOAP_TYPE___LogonAccountingServiceSoap2__DeleteLogonEvent, sizeof(struct __LogonAccountingServiceSoap2__DeleteLogonEvent), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___LogonAccountingServiceSoap2__DeleteLogonEvent(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WhosOn__DeleteLogonEvent && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_WhosOn__DeleteLogonEvent(soap, "WhosOn:DeleteLogonEvent", &a->WhosOn__DeleteLogonEvent, ""))
				{	soap_flag_WhosOn__DeleteLogonEvent--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___LogonAccountingServiceSoap2__DeleteLogonEvent(struct soap *soap, const struct __LogonAccountingServiceSoap2__DeleteLogonEvent *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___LogonAccountingServiceSoap2__DeleteLogonEvent(soap, tag?tag:"-LogonAccountingServiceSoap2:DeleteLogonEvent", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __LogonAccountingServiceSoap2__DeleteLogonEvent * SOAP_FMAC4 soap_get___LogonAccountingServiceSoap2__DeleteLogonEvent(struct soap *soap, struct __LogonAccountingServiceSoap2__DeleteLogonEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in___LogonAccountingServiceSoap2__DeleteLogonEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __LogonAccountingServiceSoap2__DeleteLogonEvent * SOAP_FMAC2 soap_instantiate___LogonAccountingServiceSoap2__DeleteLogonEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___LogonAccountingServiceSoap2__DeleteLogonEvent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___LogonAccountingServiceSoap2__DeleteLogonEvent, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __LogonAccountingServiceSoap2__DeleteLogonEvent);
		if (size)
			*size = sizeof(struct __LogonAccountingServiceSoap2__DeleteLogonEvent);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __LogonAccountingServiceSoap2__DeleteLogonEvent, n);
		if (size)
			*size = n * sizeof(struct __LogonAccountingServiceSoap2__DeleteLogonEvent);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __LogonAccountingServiceSoap2__DeleteLogonEvent*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___LogonAccountingServiceSoap2__DeleteLogonEvent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __LogonAccountingServiceSoap2__DeleteLogonEvent %p -> %p\n", q, p));
	*(struct __LogonAccountingServiceSoap2__DeleteLogonEvent*)p = *(struct __LogonAccountingServiceSoap2__DeleteLogonEvent*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___LogonAccountingServiceSoap2__CloseLogonEvent(struct soap *soap, struct __LogonAccountingServiceSoap2__CloseLogonEvent *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WhosOn__CloseLogonEvent = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___LogonAccountingServiceSoap2__CloseLogonEvent(struct soap *soap, const struct __LogonAccountingServiceSoap2__CloseLogonEvent *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_WhosOn__CloseLogonEvent(soap, &a->WhosOn__CloseLogonEvent);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___LogonAccountingServiceSoap2__CloseLogonEvent(struct soap *soap, const char *tag, int id, const struct __LogonAccountingServiceSoap2__CloseLogonEvent *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_WhosOn__CloseLogonEvent(soap, "WhosOn:CloseLogonEvent", -1, &a->WhosOn__CloseLogonEvent, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __LogonAccountingServiceSoap2__CloseLogonEvent * SOAP_FMAC4 soap_in___LogonAccountingServiceSoap2__CloseLogonEvent(struct soap *soap, const char *tag, struct __LogonAccountingServiceSoap2__CloseLogonEvent *a, const char *type)
{
	size_t soap_flag_WhosOn__CloseLogonEvent = 1;
	short soap_flag;
	a = (struct __LogonAccountingServiceSoap2__CloseLogonEvent *)soap_id_enter(soap, "", a, SOAP_TYPE___LogonAccountingServiceSoap2__CloseLogonEvent, sizeof(struct __LogonAccountingServiceSoap2__CloseLogonEvent), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___LogonAccountingServiceSoap2__CloseLogonEvent(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WhosOn__CloseLogonEvent && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_WhosOn__CloseLogonEvent(soap, "WhosOn:CloseLogonEvent", &a->WhosOn__CloseLogonEvent, ""))
				{	soap_flag_WhosOn__CloseLogonEvent--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___LogonAccountingServiceSoap2__CloseLogonEvent(struct soap *soap, const struct __LogonAccountingServiceSoap2__CloseLogonEvent *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___LogonAccountingServiceSoap2__CloseLogonEvent(soap, tag?tag:"-LogonAccountingServiceSoap2:CloseLogonEvent", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __LogonAccountingServiceSoap2__CloseLogonEvent * SOAP_FMAC4 soap_get___LogonAccountingServiceSoap2__CloseLogonEvent(struct soap *soap, struct __LogonAccountingServiceSoap2__CloseLogonEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in___LogonAccountingServiceSoap2__CloseLogonEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __LogonAccountingServiceSoap2__CloseLogonEvent * SOAP_FMAC2 soap_instantiate___LogonAccountingServiceSoap2__CloseLogonEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___LogonAccountingServiceSoap2__CloseLogonEvent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___LogonAccountingServiceSoap2__CloseLogonEvent, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __LogonAccountingServiceSoap2__CloseLogonEvent);
		if (size)
			*size = sizeof(struct __LogonAccountingServiceSoap2__CloseLogonEvent);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __LogonAccountingServiceSoap2__CloseLogonEvent, n);
		if (size)
			*size = n * sizeof(struct __LogonAccountingServiceSoap2__CloseLogonEvent);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __LogonAccountingServiceSoap2__CloseLogonEvent*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___LogonAccountingServiceSoap2__CloseLogonEvent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __LogonAccountingServiceSoap2__CloseLogonEvent %p -> %p\n", q, p));
	*(struct __LogonAccountingServiceSoap2__CloseLogonEvent*)p = *(struct __LogonAccountingServiceSoap2__CloseLogonEvent*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___LogonAccountingServiceSoap2__CreateLogonEvent(struct soap *soap, struct __LogonAccountingServiceSoap2__CreateLogonEvent *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WhosOn__CreateLogonEvent = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___LogonAccountingServiceSoap2__CreateLogonEvent(struct soap *soap, const struct __LogonAccountingServiceSoap2__CreateLogonEvent *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_WhosOn__CreateLogonEvent(soap, &a->WhosOn__CreateLogonEvent);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___LogonAccountingServiceSoap2__CreateLogonEvent(struct soap *soap, const char *tag, int id, const struct __LogonAccountingServiceSoap2__CreateLogonEvent *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_WhosOn__CreateLogonEvent(soap, "WhosOn:CreateLogonEvent", -1, &a->WhosOn__CreateLogonEvent, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __LogonAccountingServiceSoap2__CreateLogonEvent * SOAP_FMAC4 soap_in___LogonAccountingServiceSoap2__CreateLogonEvent(struct soap *soap, const char *tag, struct __LogonAccountingServiceSoap2__CreateLogonEvent *a, const char *type)
{
	size_t soap_flag_WhosOn__CreateLogonEvent = 1;
	short soap_flag;
	a = (struct __LogonAccountingServiceSoap2__CreateLogonEvent *)soap_id_enter(soap, "", a, SOAP_TYPE___LogonAccountingServiceSoap2__CreateLogonEvent, sizeof(struct __LogonAccountingServiceSoap2__CreateLogonEvent), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___LogonAccountingServiceSoap2__CreateLogonEvent(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WhosOn__CreateLogonEvent && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_WhosOn__CreateLogonEvent(soap, "WhosOn:CreateLogonEvent", &a->WhosOn__CreateLogonEvent, ""))
				{	soap_flag_WhosOn__CreateLogonEvent--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___LogonAccountingServiceSoap2__CreateLogonEvent(struct soap *soap, const struct __LogonAccountingServiceSoap2__CreateLogonEvent *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___LogonAccountingServiceSoap2__CreateLogonEvent(soap, tag?tag:"-LogonAccountingServiceSoap2:CreateLogonEvent", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __LogonAccountingServiceSoap2__CreateLogonEvent * SOAP_FMAC4 soap_get___LogonAccountingServiceSoap2__CreateLogonEvent(struct soap *soap, struct __LogonAccountingServiceSoap2__CreateLogonEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in___LogonAccountingServiceSoap2__CreateLogonEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __LogonAccountingServiceSoap2__CreateLogonEvent * SOAP_FMAC2 soap_instantiate___LogonAccountingServiceSoap2__CreateLogonEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___LogonAccountingServiceSoap2__CreateLogonEvent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___LogonAccountingServiceSoap2__CreateLogonEvent, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __LogonAccountingServiceSoap2__CreateLogonEvent);
		if (size)
			*size = sizeof(struct __LogonAccountingServiceSoap2__CreateLogonEvent);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __LogonAccountingServiceSoap2__CreateLogonEvent, n);
		if (size)
			*size = n * sizeof(struct __LogonAccountingServiceSoap2__CreateLogonEvent);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __LogonAccountingServiceSoap2__CreateLogonEvent*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___LogonAccountingServiceSoap2__CreateLogonEvent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __LogonAccountingServiceSoap2__CreateLogonEvent %p -> %p\n", q, p));
	*(struct __LogonAccountingServiceSoap2__CreateLogonEvent*)p = *(struct __LogonAccountingServiceSoap2__CreateLogonEvent*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___LogonAccountingServiceSoap__FindLogonEvents(struct soap *soap, struct __LogonAccountingServiceSoap__FindLogonEvents *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WhosOn__FindLogonEvents = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___LogonAccountingServiceSoap__FindLogonEvents(struct soap *soap, const struct __LogonAccountingServiceSoap__FindLogonEvents *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_WhosOn__FindLogonEvents(soap, &a->WhosOn__FindLogonEvents);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___LogonAccountingServiceSoap__FindLogonEvents(struct soap *soap, const char *tag, int id, const struct __LogonAccountingServiceSoap__FindLogonEvents *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_WhosOn__FindLogonEvents(soap, "WhosOn:FindLogonEvents", -1, &a->WhosOn__FindLogonEvents, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __LogonAccountingServiceSoap__FindLogonEvents * SOAP_FMAC4 soap_in___LogonAccountingServiceSoap__FindLogonEvents(struct soap *soap, const char *tag, struct __LogonAccountingServiceSoap__FindLogonEvents *a, const char *type)
{
	size_t soap_flag_WhosOn__FindLogonEvents = 1;
	short soap_flag;
	a = (struct __LogonAccountingServiceSoap__FindLogonEvents *)soap_id_enter(soap, "", a, SOAP_TYPE___LogonAccountingServiceSoap__FindLogonEvents, sizeof(struct __LogonAccountingServiceSoap__FindLogonEvents), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___LogonAccountingServiceSoap__FindLogonEvents(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WhosOn__FindLogonEvents && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_WhosOn__FindLogonEvents(soap, "WhosOn:FindLogonEvents", &a->WhosOn__FindLogonEvents, ""))
				{	soap_flag_WhosOn__FindLogonEvents--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___LogonAccountingServiceSoap__FindLogonEvents(struct soap *soap, const struct __LogonAccountingServiceSoap__FindLogonEvents *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___LogonAccountingServiceSoap__FindLogonEvents(soap, tag?tag:"-LogonAccountingServiceSoap:FindLogonEvents", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __LogonAccountingServiceSoap__FindLogonEvents * SOAP_FMAC4 soap_get___LogonAccountingServiceSoap__FindLogonEvents(struct soap *soap, struct __LogonAccountingServiceSoap__FindLogonEvents *p, const char *tag, const char *type)
{
	if ((p = soap_in___LogonAccountingServiceSoap__FindLogonEvents(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __LogonAccountingServiceSoap__FindLogonEvents * SOAP_FMAC2 soap_instantiate___LogonAccountingServiceSoap__FindLogonEvents(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___LogonAccountingServiceSoap__FindLogonEvents(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___LogonAccountingServiceSoap__FindLogonEvents, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __LogonAccountingServiceSoap__FindLogonEvents);
		if (size)
			*size = sizeof(struct __LogonAccountingServiceSoap__FindLogonEvents);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __LogonAccountingServiceSoap__FindLogonEvents, n);
		if (size)
			*size = n * sizeof(struct __LogonAccountingServiceSoap__FindLogonEvents);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __LogonAccountingServiceSoap__FindLogonEvents*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___LogonAccountingServiceSoap__FindLogonEvents(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __LogonAccountingServiceSoap__FindLogonEvents %p -> %p\n", q, p));
	*(struct __LogonAccountingServiceSoap__FindLogonEvents*)p = *(struct __LogonAccountingServiceSoap__FindLogonEvents*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___LogonAccountingServiceSoap__FindLogonEvent(struct soap *soap, struct __LogonAccountingServiceSoap__FindLogonEvent *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WhosOn__FindLogonEvent = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___LogonAccountingServiceSoap__FindLogonEvent(struct soap *soap, const struct __LogonAccountingServiceSoap__FindLogonEvent *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_WhosOn__FindLogonEvent(soap, &a->WhosOn__FindLogonEvent);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___LogonAccountingServiceSoap__FindLogonEvent(struct soap *soap, const char *tag, int id, const struct __LogonAccountingServiceSoap__FindLogonEvent *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_WhosOn__FindLogonEvent(soap, "WhosOn:FindLogonEvent", -1, &a->WhosOn__FindLogonEvent, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __LogonAccountingServiceSoap__FindLogonEvent * SOAP_FMAC4 soap_in___LogonAccountingServiceSoap__FindLogonEvent(struct soap *soap, const char *tag, struct __LogonAccountingServiceSoap__FindLogonEvent *a, const char *type)
{
	size_t soap_flag_WhosOn__FindLogonEvent = 1;
	short soap_flag;
	a = (struct __LogonAccountingServiceSoap__FindLogonEvent *)soap_id_enter(soap, "", a, SOAP_TYPE___LogonAccountingServiceSoap__FindLogonEvent, sizeof(struct __LogonAccountingServiceSoap__FindLogonEvent), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___LogonAccountingServiceSoap__FindLogonEvent(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WhosOn__FindLogonEvent && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_WhosOn__FindLogonEvent(soap, "WhosOn:FindLogonEvent", &a->WhosOn__FindLogonEvent, ""))
				{	soap_flag_WhosOn__FindLogonEvent--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___LogonAccountingServiceSoap__FindLogonEvent(struct soap *soap, const struct __LogonAccountingServiceSoap__FindLogonEvent *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___LogonAccountingServiceSoap__FindLogonEvent(soap, tag?tag:"-LogonAccountingServiceSoap:FindLogonEvent", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __LogonAccountingServiceSoap__FindLogonEvent * SOAP_FMAC4 soap_get___LogonAccountingServiceSoap__FindLogonEvent(struct soap *soap, struct __LogonAccountingServiceSoap__FindLogonEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in___LogonAccountingServiceSoap__FindLogonEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __LogonAccountingServiceSoap__FindLogonEvent * SOAP_FMAC2 soap_instantiate___LogonAccountingServiceSoap__FindLogonEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___LogonAccountingServiceSoap__FindLogonEvent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___LogonAccountingServiceSoap__FindLogonEvent, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __LogonAccountingServiceSoap__FindLogonEvent);
		if (size)
			*size = sizeof(struct __LogonAccountingServiceSoap__FindLogonEvent);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __LogonAccountingServiceSoap__FindLogonEvent, n);
		if (size)
			*size = n * sizeof(struct __LogonAccountingServiceSoap__FindLogonEvent);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __LogonAccountingServiceSoap__FindLogonEvent*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___LogonAccountingServiceSoap__FindLogonEvent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __LogonAccountingServiceSoap__FindLogonEvent %p -> %p\n", q, p));
	*(struct __LogonAccountingServiceSoap__FindLogonEvent*)p = *(struct __LogonAccountingServiceSoap__FindLogonEvent*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___LogonAccountingServiceSoap__DeleteLogonEvent(struct soap *soap, struct __LogonAccountingServiceSoap__DeleteLogonEvent *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WhosOn__DeleteLogonEvent = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___LogonAccountingServiceSoap__DeleteLogonEvent(struct soap *soap, const struct __LogonAccountingServiceSoap__DeleteLogonEvent *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_WhosOn__DeleteLogonEvent(soap, &a->WhosOn__DeleteLogonEvent);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___LogonAccountingServiceSoap__DeleteLogonEvent(struct soap *soap, const char *tag, int id, const struct __LogonAccountingServiceSoap__DeleteLogonEvent *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_WhosOn__DeleteLogonEvent(soap, "WhosOn:DeleteLogonEvent", -1, &a->WhosOn__DeleteLogonEvent, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __LogonAccountingServiceSoap__DeleteLogonEvent * SOAP_FMAC4 soap_in___LogonAccountingServiceSoap__DeleteLogonEvent(struct soap *soap, const char *tag, struct __LogonAccountingServiceSoap__DeleteLogonEvent *a, const char *type)
{
	size_t soap_flag_WhosOn__DeleteLogonEvent = 1;
	short soap_flag;
	a = (struct __LogonAccountingServiceSoap__DeleteLogonEvent *)soap_id_enter(soap, "", a, SOAP_TYPE___LogonAccountingServiceSoap__DeleteLogonEvent, sizeof(struct __LogonAccountingServiceSoap__DeleteLogonEvent), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___LogonAccountingServiceSoap__DeleteLogonEvent(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WhosOn__DeleteLogonEvent && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_WhosOn__DeleteLogonEvent(soap, "WhosOn:DeleteLogonEvent", &a->WhosOn__DeleteLogonEvent, ""))
				{	soap_flag_WhosOn__DeleteLogonEvent--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___LogonAccountingServiceSoap__DeleteLogonEvent(struct soap *soap, const struct __LogonAccountingServiceSoap__DeleteLogonEvent *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___LogonAccountingServiceSoap__DeleteLogonEvent(soap, tag?tag:"-LogonAccountingServiceSoap:DeleteLogonEvent", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __LogonAccountingServiceSoap__DeleteLogonEvent * SOAP_FMAC4 soap_get___LogonAccountingServiceSoap__DeleteLogonEvent(struct soap *soap, struct __LogonAccountingServiceSoap__DeleteLogonEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in___LogonAccountingServiceSoap__DeleteLogonEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __LogonAccountingServiceSoap__DeleteLogonEvent * SOAP_FMAC2 soap_instantiate___LogonAccountingServiceSoap__DeleteLogonEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___LogonAccountingServiceSoap__DeleteLogonEvent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___LogonAccountingServiceSoap__DeleteLogonEvent, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __LogonAccountingServiceSoap__DeleteLogonEvent);
		if (size)
			*size = sizeof(struct __LogonAccountingServiceSoap__DeleteLogonEvent);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __LogonAccountingServiceSoap__DeleteLogonEvent, n);
		if (size)
			*size = n * sizeof(struct __LogonAccountingServiceSoap__DeleteLogonEvent);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __LogonAccountingServiceSoap__DeleteLogonEvent*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___LogonAccountingServiceSoap__DeleteLogonEvent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __LogonAccountingServiceSoap__DeleteLogonEvent %p -> %p\n", q, p));
	*(struct __LogonAccountingServiceSoap__DeleteLogonEvent*)p = *(struct __LogonAccountingServiceSoap__DeleteLogonEvent*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___LogonAccountingServiceSoap__CloseLogonEvent(struct soap *soap, struct __LogonAccountingServiceSoap__CloseLogonEvent *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WhosOn__CloseLogonEvent = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___LogonAccountingServiceSoap__CloseLogonEvent(struct soap *soap, const struct __LogonAccountingServiceSoap__CloseLogonEvent *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_WhosOn__CloseLogonEvent(soap, &a->WhosOn__CloseLogonEvent);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___LogonAccountingServiceSoap__CloseLogonEvent(struct soap *soap, const char *tag, int id, const struct __LogonAccountingServiceSoap__CloseLogonEvent *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_WhosOn__CloseLogonEvent(soap, "WhosOn:CloseLogonEvent", -1, &a->WhosOn__CloseLogonEvent, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __LogonAccountingServiceSoap__CloseLogonEvent * SOAP_FMAC4 soap_in___LogonAccountingServiceSoap__CloseLogonEvent(struct soap *soap, const char *tag, struct __LogonAccountingServiceSoap__CloseLogonEvent *a, const char *type)
{
	size_t soap_flag_WhosOn__CloseLogonEvent = 1;
	short soap_flag;
	a = (struct __LogonAccountingServiceSoap__CloseLogonEvent *)soap_id_enter(soap, "", a, SOAP_TYPE___LogonAccountingServiceSoap__CloseLogonEvent, sizeof(struct __LogonAccountingServiceSoap__CloseLogonEvent), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___LogonAccountingServiceSoap__CloseLogonEvent(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WhosOn__CloseLogonEvent && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_WhosOn__CloseLogonEvent(soap, "WhosOn:CloseLogonEvent", &a->WhosOn__CloseLogonEvent, ""))
				{	soap_flag_WhosOn__CloseLogonEvent--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___LogonAccountingServiceSoap__CloseLogonEvent(struct soap *soap, const struct __LogonAccountingServiceSoap__CloseLogonEvent *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___LogonAccountingServiceSoap__CloseLogonEvent(soap, tag?tag:"-LogonAccountingServiceSoap:CloseLogonEvent", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __LogonAccountingServiceSoap__CloseLogonEvent * SOAP_FMAC4 soap_get___LogonAccountingServiceSoap__CloseLogonEvent(struct soap *soap, struct __LogonAccountingServiceSoap__CloseLogonEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in___LogonAccountingServiceSoap__CloseLogonEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __LogonAccountingServiceSoap__CloseLogonEvent * SOAP_FMAC2 soap_instantiate___LogonAccountingServiceSoap__CloseLogonEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___LogonAccountingServiceSoap__CloseLogonEvent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___LogonAccountingServiceSoap__CloseLogonEvent, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __LogonAccountingServiceSoap__CloseLogonEvent);
		if (size)
			*size = sizeof(struct __LogonAccountingServiceSoap__CloseLogonEvent);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __LogonAccountingServiceSoap__CloseLogonEvent, n);
		if (size)
			*size = n * sizeof(struct __LogonAccountingServiceSoap__CloseLogonEvent);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __LogonAccountingServiceSoap__CloseLogonEvent*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___LogonAccountingServiceSoap__CloseLogonEvent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __LogonAccountingServiceSoap__CloseLogonEvent %p -> %p\n", q, p));
	*(struct __LogonAccountingServiceSoap__CloseLogonEvent*)p = *(struct __LogonAccountingServiceSoap__CloseLogonEvent*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___LogonAccountingServiceSoap__CreateLogonEvent(struct soap *soap, struct __LogonAccountingServiceSoap__CreateLogonEvent *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->WhosOn__CreateLogonEvent = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___LogonAccountingServiceSoap__CreateLogonEvent(struct soap *soap, const struct __LogonAccountingServiceSoap__CreateLogonEvent *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_WhosOn__CreateLogonEvent(soap, &a->WhosOn__CreateLogonEvent);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___LogonAccountingServiceSoap__CreateLogonEvent(struct soap *soap, const char *tag, int id, const struct __LogonAccountingServiceSoap__CreateLogonEvent *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_WhosOn__CreateLogonEvent(soap, "WhosOn:CreateLogonEvent", -1, &a->WhosOn__CreateLogonEvent, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __LogonAccountingServiceSoap__CreateLogonEvent * SOAP_FMAC4 soap_in___LogonAccountingServiceSoap__CreateLogonEvent(struct soap *soap, const char *tag, struct __LogonAccountingServiceSoap__CreateLogonEvent *a, const char *type)
{
	size_t soap_flag_WhosOn__CreateLogonEvent = 1;
	short soap_flag;
	a = (struct __LogonAccountingServiceSoap__CreateLogonEvent *)soap_id_enter(soap, "", a, SOAP_TYPE___LogonAccountingServiceSoap__CreateLogonEvent, sizeof(struct __LogonAccountingServiceSoap__CreateLogonEvent), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___LogonAccountingServiceSoap__CreateLogonEvent(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WhosOn__CreateLogonEvent && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_WhosOn__CreateLogonEvent(soap, "WhosOn:CreateLogonEvent", &a->WhosOn__CreateLogonEvent, ""))
				{	soap_flag_WhosOn__CreateLogonEvent--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___LogonAccountingServiceSoap__CreateLogonEvent(struct soap *soap, const struct __LogonAccountingServiceSoap__CreateLogonEvent *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___LogonAccountingServiceSoap__CreateLogonEvent(soap, tag?tag:"-LogonAccountingServiceSoap:CreateLogonEvent", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __LogonAccountingServiceSoap__CreateLogonEvent * SOAP_FMAC4 soap_get___LogonAccountingServiceSoap__CreateLogonEvent(struct soap *soap, struct __LogonAccountingServiceSoap__CreateLogonEvent *p, const char *tag, const char *type)
{
	if ((p = soap_in___LogonAccountingServiceSoap__CreateLogonEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __LogonAccountingServiceSoap__CreateLogonEvent * SOAP_FMAC2 soap_instantiate___LogonAccountingServiceSoap__CreateLogonEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___LogonAccountingServiceSoap__CreateLogonEvent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___LogonAccountingServiceSoap__CreateLogonEvent, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __LogonAccountingServiceSoap__CreateLogonEvent);
		if (size)
			*size = sizeof(struct __LogonAccountingServiceSoap__CreateLogonEvent);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __LogonAccountingServiceSoap__CreateLogonEvent, n);
		if (size)
			*size = n * sizeof(struct __LogonAccountingServiceSoap__CreateLogonEvent);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __LogonAccountingServiceSoap__CreateLogonEvent*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___LogonAccountingServiceSoap__CreateLogonEvent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __LogonAccountingServiceSoap__CreateLogonEvent %p -> %p\n", q, p));
	*(struct __LogonAccountingServiceSoap__CreateLogonEvent*)p = *(struct __LogonAccountingServiceSoap__CreateLogonEvent*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_WhosOn__FindLogonEventsResponse(struct soap *soap, _WhosOn__FindLogonEventsResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__WhosOn__FindLogonEventsResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_WhosOn__FindLogonEventsResponse(struct soap *soap, const char *tag, int id, _WhosOn__FindLogonEventsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__WhosOn__FindLogonEventsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _WhosOn__FindLogonEventsResponse ** SOAP_FMAC4 soap_in_PointerTo_WhosOn__FindLogonEventsResponse(struct soap *soap, const char *tag, _WhosOn__FindLogonEventsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_WhosOn__FindLogonEventsResponse **)soap_malloc(soap, sizeof(_WhosOn__FindLogonEventsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_WhosOn__FindLogonEventsResponse *)soap_instantiate__WhosOn__FindLogonEventsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_WhosOn__FindLogonEventsResponse ** p = (_WhosOn__FindLogonEventsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__WhosOn__FindLogonEventsResponse, sizeof(_WhosOn__FindLogonEventsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_WhosOn__FindLogonEventsResponse(struct soap *soap, _WhosOn__FindLogonEventsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_WhosOn__FindLogonEventsResponse);
	if (soap_out_PointerTo_WhosOn__FindLogonEventsResponse(soap, tag?tag:"WhosOn:FindLogonEventsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _WhosOn__FindLogonEventsResponse ** SOAP_FMAC4 soap_get_PointerTo_WhosOn__FindLogonEventsResponse(struct soap *soap, _WhosOn__FindLogonEventsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_WhosOn__FindLogonEventsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_WhosOn__FindLogonEvents(struct soap *soap, _WhosOn__FindLogonEvents *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__WhosOn__FindLogonEvents))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_WhosOn__FindLogonEvents(struct soap *soap, const char *tag, int id, _WhosOn__FindLogonEvents *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__WhosOn__FindLogonEvents);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _WhosOn__FindLogonEvents ** SOAP_FMAC4 soap_in_PointerTo_WhosOn__FindLogonEvents(struct soap *soap, const char *tag, _WhosOn__FindLogonEvents **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_WhosOn__FindLogonEvents **)soap_malloc(soap, sizeof(_WhosOn__FindLogonEvents *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_WhosOn__FindLogonEvents *)soap_instantiate__WhosOn__FindLogonEvents(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_WhosOn__FindLogonEvents ** p = (_WhosOn__FindLogonEvents **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__WhosOn__FindLogonEvents, sizeof(_WhosOn__FindLogonEvents), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_WhosOn__FindLogonEvents(struct soap *soap, _WhosOn__FindLogonEvents *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_WhosOn__FindLogonEvents);
	if (soap_out_PointerTo_WhosOn__FindLogonEvents(soap, tag?tag:"WhosOn:FindLogonEvents", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _WhosOn__FindLogonEvents ** SOAP_FMAC4 soap_get_PointerTo_WhosOn__FindLogonEvents(struct soap *soap, _WhosOn__FindLogonEvents **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_WhosOn__FindLogonEvents(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_WhosOn__FindLogonEventResponse(struct soap *soap, _WhosOn__FindLogonEventResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__WhosOn__FindLogonEventResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_WhosOn__FindLogonEventResponse(struct soap *soap, const char *tag, int id, _WhosOn__FindLogonEventResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__WhosOn__FindLogonEventResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _WhosOn__FindLogonEventResponse ** SOAP_FMAC4 soap_in_PointerTo_WhosOn__FindLogonEventResponse(struct soap *soap, const char *tag, _WhosOn__FindLogonEventResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_WhosOn__FindLogonEventResponse **)soap_malloc(soap, sizeof(_WhosOn__FindLogonEventResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_WhosOn__FindLogonEventResponse *)soap_instantiate__WhosOn__FindLogonEventResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_WhosOn__FindLogonEventResponse ** p = (_WhosOn__FindLogonEventResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__WhosOn__FindLogonEventResponse, sizeof(_WhosOn__FindLogonEventResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_WhosOn__FindLogonEventResponse(struct soap *soap, _WhosOn__FindLogonEventResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_WhosOn__FindLogonEventResponse);
	if (soap_out_PointerTo_WhosOn__FindLogonEventResponse(soap, tag?tag:"WhosOn:FindLogonEventResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _WhosOn__FindLogonEventResponse ** SOAP_FMAC4 soap_get_PointerTo_WhosOn__FindLogonEventResponse(struct soap *soap, _WhosOn__FindLogonEventResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_WhosOn__FindLogonEventResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_WhosOn__FindLogonEvent(struct soap *soap, _WhosOn__FindLogonEvent *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__WhosOn__FindLogonEvent))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_WhosOn__FindLogonEvent(struct soap *soap, const char *tag, int id, _WhosOn__FindLogonEvent *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__WhosOn__FindLogonEvent);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _WhosOn__FindLogonEvent ** SOAP_FMAC4 soap_in_PointerTo_WhosOn__FindLogonEvent(struct soap *soap, const char *tag, _WhosOn__FindLogonEvent **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_WhosOn__FindLogonEvent **)soap_malloc(soap, sizeof(_WhosOn__FindLogonEvent *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_WhosOn__FindLogonEvent *)soap_instantiate__WhosOn__FindLogonEvent(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_WhosOn__FindLogonEvent ** p = (_WhosOn__FindLogonEvent **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__WhosOn__FindLogonEvent, sizeof(_WhosOn__FindLogonEvent), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_WhosOn__FindLogonEvent(struct soap *soap, _WhosOn__FindLogonEvent *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_WhosOn__FindLogonEvent);
	if (soap_out_PointerTo_WhosOn__FindLogonEvent(soap, tag?tag:"WhosOn:FindLogonEvent", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _WhosOn__FindLogonEvent ** SOAP_FMAC4 soap_get_PointerTo_WhosOn__FindLogonEvent(struct soap *soap, _WhosOn__FindLogonEvent **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_WhosOn__FindLogonEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_WhosOn__DeleteLogonEventResponse(struct soap *soap, _WhosOn__DeleteLogonEventResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__WhosOn__DeleteLogonEventResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_WhosOn__DeleteLogonEventResponse(struct soap *soap, const char *tag, int id, _WhosOn__DeleteLogonEventResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__WhosOn__DeleteLogonEventResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _WhosOn__DeleteLogonEventResponse ** SOAP_FMAC4 soap_in_PointerTo_WhosOn__DeleteLogonEventResponse(struct soap *soap, const char *tag, _WhosOn__DeleteLogonEventResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_WhosOn__DeleteLogonEventResponse **)soap_malloc(soap, sizeof(_WhosOn__DeleteLogonEventResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_WhosOn__DeleteLogonEventResponse *)soap_instantiate__WhosOn__DeleteLogonEventResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_WhosOn__DeleteLogonEventResponse ** p = (_WhosOn__DeleteLogonEventResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__WhosOn__DeleteLogonEventResponse, sizeof(_WhosOn__DeleteLogonEventResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_WhosOn__DeleteLogonEventResponse(struct soap *soap, _WhosOn__DeleteLogonEventResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_WhosOn__DeleteLogonEventResponse);
	if (soap_out_PointerTo_WhosOn__DeleteLogonEventResponse(soap, tag?tag:"WhosOn:DeleteLogonEventResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _WhosOn__DeleteLogonEventResponse ** SOAP_FMAC4 soap_get_PointerTo_WhosOn__DeleteLogonEventResponse(struct soap *soap, _WhosOn__DeleteLogonEventResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_WhosOn__DeleteLogonEventResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_WhosOn__DeleteLogonEvent(struct soap *soap, _WhosOn__DeleteLogonEvent *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__WhosOn__DeleteLogonEvent))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_WhosOn__DeleteLogonEvent(struct soap *soap, const char *tag, int id, _WhosOn__DeleteLogonEvent *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__WhosOn__DeleteLogonEvent);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _WhosOn__DeleteLogonEvent ** SOAP_FMAC4 soap_in_PointerTo_WhosOn__DeleteLogonEvent(struct soap *soap, const char *tag, _WhosOn__DeleteLogonEvent **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_WhosOn__DeleteLogonEvent **)soap_malloc(soap, sizeof(_WhosOn__DeleteLogonEvent *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_WhosOn__DeleteLogonEvent *)soap_instantiate__WhosOn__DeleteLogonEvent(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_WhosOn__DeleteLogonEvent ** p = (_WhosOn__DeleteLogonEvent **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__WhosOn__DeleteLogonEvent, sizeof(_WhosOn__DeleteLogonEvent), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_WhosOn__DeleteLogonEvent(struct soap *soap, _WhosOn__DeleteLogonEvent *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_WhosOn__DeleteLogonEvent);
	if (soap_out_PointerTo_WhosOn__DeleteLogonEvent(soap, tag?tag:"WhosOn:DeleteLogonEvent", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _WhosOn__DeleteLogonEvent ** SOAP_FMAC4 soap_get_PointerTo_WhosOn__DeleteLogonEvent(struct soap *soap, _WhosOn__DeleteLogonEvent **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_WhosOn__DeleteLogonEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_WhosOn__CloseLogonEventResponse(struct soap *soap, _WhosOn__CloseLogonEventResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__WhosOn__CloseLogonEventResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_WhosOn__CloseLogonEventResponse(struct soap *soap, const char *tag, int id, _WhosOn__CloseLogonEventResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__WhosOn__CloseLogonEventResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _WhosOn__CloseLogonEventResponse ** SOAP_FMAC4 soap_in_PointerTo_WhosOn__CloseLogonEventResponse(struct soap *soap, const char *tag, _WhosOn__CloseLogonEventResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_WhosOn__CloseLogonEventResponse **)soap_malloc(soap, sizeof(_WhosOn__CloseLogonEventResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_WhosOn__CloseLogonEventResponse *)soap_instantiate__WhosOn__CloseLogonEventResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_WhosOn__CloseLogonEventResponse ** p = (_WhosOn__CloseLogonEventResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__WhosOn__CloseLogonEventResponse, sizeof(_WhosOn__CloseLogonEventResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_WhosOn__CloseLogonEventResponse(struct soap *soap, _WhosOn__CloseLogonEventResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_WhosOn__CloseLogonEventResponse);
	if (soap_out_PointerTo_WhosOn__CloseLogonEventResponse(soap, tag?tag:"WhosOn:CloseLogonEventResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _WhosOn__CloseLogonEventResponse ** SOAP_FMAC4 soap_get_PointerTo_WhosOn__CloseLogonEventResponse(struct soap *soap, _WhosOn__CloseLogonEventResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_WhosOn__CloseLogonEventResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_WhosOn__CloseLogonEvent(struct soap *soap, _WhosOn__CloseLogonEvent *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__WhosOn__CloseLogonEvent))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_WhosOn__CloseLogonEvent(struct soap *soap, const char *tag, int id, _WhosOn__CloseLogonEvent *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__WhosOn__CloseLogonEvent);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _WhosOn__CloseLogonEvent ** SOAP_FMAC4 soap_in_PointerTo_WhosOn__CloseLogonEvent(struct soap *soap, const char *tag, _WhosOn__CloseLogonEvent **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_WhosOn__CloseLogonEvent **)soap_malloc(soap, sizeof(_WhosOn__CloseLogonEvent *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_WhosOn__CloseLogonEvent *)soap_instantiate__WhosOn__CloseLogonEvent(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_WhosOn__CloseLogonEvent ** p = (_WhosOn__CloseLogonEvent **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__WhosOn__CloseLogonEvent, sizeof(_WhosOn__CloseLogonEvent), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_WhosOn__CloseLogonEvent(struct soap *soap, _WhosOn__CloseLogonEvent *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_WhosOn__CloseLogonEvent);
	if (soap_out_PointerTo_WhosOn__CloseLogonEvent(soap, tag?tag:"WhosOn:CloseLogonEvent", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _WhosOn__CloseLogonEvent ** SOAP_FMAC4 soap_get_PointerTo_WhosOn__CloseLogonEvent(struct soap *soap, _WhosOn__CloseLogonEvent **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_WhosOn__CloseLogonEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_WhosOn__CreateLogonEventResponse(struct soap *soap, _WhosOn__CreateLogonEventResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__WhosOn__CreateLogonEventResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_WhosOn__CreateLogonEventResponse(struct soap *soap, const char *tag, int id, _WhosOn__CreateLogonEventResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__WhosOn__CreateLogonEventResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _WhosOn__CreateLogonEventResponse ** SOAP_FMAC4 soap_in_PointerTo_WhosOn__CreateLogonEventResponse(struct soap *soap, const char *tag, _WhosOn__CreateLogonEventResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_WhosOn__CreateLogonEventResponse **)soap_malloc(soap, sizeof(_WhosOn__CreateLogonEventResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_WhosOn__CreateLogonEventResponse *)soap_instantiate__WhosOn__CreateLogonEventResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_WhosOn__CreateLogonEventResponse ** p = (_WhosOn__CreateLogonEventResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__WhosOn__CreateLogonEventResponse, sizeof(_WhosOn__CreateLogonEventResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_WhosOn__CreateLogonEventResponse(struct soap *soap, _WhosOn__CreateLogonEventResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_WhosOn__CreateLogonEventResponse);
	if (soap_out_PointerTo_WhosOn__CreateLogonEventResponse(soap, tag?tag:"WhosOn:CreateLogonEventResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _WhosOn__CreateLogonEventResponse ** SOAP_FMAC4 soap_get_PointerTo_WhosOn__CreateLogonEventResponse(struct soap *soap, _WhosOn__CreateLogonEventResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_WhosOn__CreateLogonEventResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_WhosOn__CreateLogonEvent(struct soap *soap, _WhosOn__CreateLogonEvent *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__WhosOn__CreateLogonEvent))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_WhosOn__CreateLogonEvent(struct soap *soap, const char *tag, int id, _WhosOn__CreateLogonEvent *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__WhosOn__CreateLogonEvent);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _WhosOn__CreateLogonEvent ** SOAP_FMAC4 soap_in_PointerTo_WhosOn__CreateLogonEvent(struct soap *soap, const char *tag, _WhosOn__CreateLogonEvent **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_WhosOn__CreateLogonEvent **)soap_malloc(soap, sizeof(_WhosOn__CreateLogonEvent *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_WhosOn__CreateLogonEvent *)soap_instantiate__WhosOn__CreateLogonEvent(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_WhosOn__CreateLogonEvent ** p = (_WhosOn__CreateLogonEvent **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__WhosOn__CreateLogonEvent, sizeof(_WhosOn__CreateLogonEvent), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_WhosOn__CreateLogonEvent(struct soap *soap, _WhosOn__CreateLogonEvent *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_WhosOn__CreateLogonEvent);
	if (soap_out_PointerTo_WhosOn__CreateLogonEvent(soap, tag?tag:"WhosOn:CreateLogonEvent", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _WhosOn__CreateLogonEvent ** SOAP_FMAC4 soap_get_PointerTo_WhosOn__CreateLogonEvent(struct soap *soap, _WhosOn__CreateLogonEvent **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_WhosOn__CreateLogonEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToWhosOn__ArrayOfLogonEvent(struct soap *soap, WhosOn__ArrayOfLogonEvent *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_WhosOn__ArrayOfLogonEvent))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToWhosOn__ArrayOfLogonEvent(struct soap *soap, const char *tag, int id, WhosOn__ArrayOfLogonEvent *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WhosOn__ArrayOfLogonEvent);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 WhosOn__ArrayOfLogonEvent ** SOAP_FMAC4 soap_in_PointerToWhosOn__ArrayOfLogonEvent(struct soap *soap, const char *tag, WhosOn__ArrayOfLogonEvent **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (WhosOn__ArrayOfLogonEvent **)soap_malloc(soap, sizeof(WhosOn__ArrayOfLogonEvent *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (WhosOn__ArrayOfLogonEvent *)soap_instantiate_WhosOn__ArrayOfLogonEvent(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	WhosOn__ArrayOfLogonEvent ** p = (WhosOn__ArrayOfLogonEvent **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WhosOn__ArrayOfLogonEvent, sizeof(WhosOn__ArrayOfLogonEvent), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToWhosOn__ArrayOfLogonEvent(struct soap *soap, WhosOn__ArrayOfLogonEvent *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToWhosOn__ArrayOfLogonEvent);
	if (soap_out_PointerToWhosOn__ArrayOfLogonEvent(soap, tag?tag:"WhosOn:ArrayOfLogonEvent", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 WhosOn__ArrayOfLogonEvent ** SOAP_FMAC4 soap_get_PointerToWhosOn__ArrayOfLogonEvent(struct soap *soap, WhosOn__ArrayOfLogonEvent **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToWhosOn__ArrayOfLogonEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToWhosOn__LogonEvent(struct soap *soap, WhosOn__LogonEvent *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_WhosOn__LogonEvent))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToWhosOn__LogonEvent(struct soap *soap, const char *tag, int id, WhosOn__LogonEvent *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WhosOn__LogonEvent);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 WhosOn__LogonEvent ** SOAP_FMAC4 soap_in_PointerToWhosOn__LogonEvent(struct soap *soap, const char *tag, WhosOn__LogonEvent **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (WhosOn__LogonEvent **)soap_malloc(soap, sizeof(WhosOn__LogonEvent *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (WhosOn__LogonEvent *)soap_instantiate_WhosOn__LogonEvent(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	WhosOn__LogonEvent ** p = (WhosOn__LogonEvent **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WhosOn__LogonEvent, sizeof(WhosOn__LogonEvent), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToWhosOn__LogonEvent(struct soap *soap, WhosOn__LogonEvent *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToWhosOn__LogonEvent);
	if (soap_out_PointerToWhosOn__LogonEvent(soap, tag?tag:"WhosOn:LogonEvent", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 WhosOn__LogonEvent ** SOAP_FMAC4 soap_get_PointerToWhosOn__LogonEvent(struct soap *soap, WhosOn__LogonEvent **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToWhosOn__LogonEvent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToWhosOn__LogonEvent(struct soap *soap, std::vector<WhosOn__LogonEvent * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToWhosOn__LogonEvent(struct soap *soap, const std::vector<WhosOn__LogonEvent * >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<WhosOn__LogonEvent * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerToWhosOn__LogonEvent(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToWhosOn__LogonEvent(struct soap *soap, const char *tag, int id, const std::vector<WhosOn__LogonEvent * >*a, const char *type)
{
	for (std::vector<WhosOn__LogonEvent * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerToWhosOn__LogonEvent(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<WhosOn__LogonEvent * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToWhosOn__LogonEvent(struct soap *soap, const char *tag, std::vector<WhosOn__LogonEvent * >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	WhosOn__LogonEvent *n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_WhosOn__LogonEvent, SOAP_TYPE_std__vectorTemplateOfPointerToWhosOn__LogonEvent, sizeof(WhosOn__LogonEvent), 1))
				break;
			if (!soap_in_PointerToWhosOn__LogonEvent(soap, tag, NULL, "WhosOn:LogonEvent"))
				break;
		}
		else if (!soap_in_PointerToWhosOn__LogonEvent(soap, tag, &n, "WhosOn:LogonEvent"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerToWhosOn__LogonEvent(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<WhosOn__LogonEvent * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToWhosOn__LogonEvent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerToWhosOn__LogonEvent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfPointerToWhosOn__LogonEvent, n, WhosOn_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<WhosOn__LogonEvent * >);
		if (size)
			*size = sizeof(std::vector<WhosOn__LogonEvent * >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<WhosOn__LogonEvent * >, n);
		if (size)
			*size = n * sizeof(std::vector<WhosOn__LogonEvent * >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<WhosOn__LogonEvent * >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerToWhosOn__LogonEvent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<WhosOn__LogonEvent * > %p -> %p\n", q, p));
	*(std::vector<WhosOn__LogonEvent * >*)p = *(std::vector<WhosOn__LogonEvent * >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of WhosOnC.cpp */
