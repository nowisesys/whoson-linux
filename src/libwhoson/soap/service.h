/* service.h
   Generated by wsdl2h 1.2.17 from service.wsdl and typemap.dat
   2011-12-19 15:22:02 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on service.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://it.bmc.uu.se/whoson                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

WhosOn = "http://it.bmc.uu.se/whoson"

*/

#define SOAP_NAMESPACE_OF_WhosOn	"http://it.bmc.uu.se/whoson"
//gsoap WhosOn schema namespace:	http://it.bmc.uu.se/whoson
//gsoap WhosOn schema elementForm:	qualified
//gsoap WhosOn schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class WhosOn__LogonEvent.
class WhosOn__LogonEvent;

//  Forward declaration of class WhosOn__ArrayOfLogonEvent.
class WhosOn__ArrayOfLogonEvent;

//  Forward declaration of class _WhosOn__CreateLogonEvent.
class _WhosOn__CreateLogonEvent;

//  Forward declaration of class _WhosOn__CreateLogonEventResponse.
class _WhosOn__CreateLogonEventResponse;

//  Forward declaration of class _WhosOn__CloseLogonEvent.
class _WhosOn__CloseLogonEvent;

//  Forward declaration of class _WhosOn__CloseLogonEventResponse.
class _WhosOn__CloseLogonEventResponse;

//  Forward declaration of class _WhosOn__DeleteLogonEvent.
class _WhosOn__DeleteLogonEvent;

//  Forward declaration of class _WhosOn__DeleteLogonEventResponse.
class _WhosOn__DeleteLogonEventResponse;

//  Forward declaration of class _WhosOn__FindLogonEvent.
class _WhosOn__FindLogonEvent;

//  Forward declaration of class _WhosOn__FindLogonEventResponse.
class _WhosOn__FindLogonEventResponse;

//  Forward declaration of class _WhosOn__FindLogonEvents.
class _WhosOn__FindLogonEvents;

//  Forward declaration of class _WhosOn__FindLogonEventsResponse.
class _WhosOn__FindLogonEventsResponse;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://it.bmc.uu.se/whoson                                               *
 *                                                                            *
\******************************************************************************/


/// "http://it.bmc.uu.se/whoson":LogonEventMatch is a simpleType restriction of xs:string.
enum WhosOn__LogonEventMatch
{
	Before,	///< xs:string value="Before"
	Between,	///< xs:string value="Between"
	After,	///< xs:string value="After"
	Exact,	///< xs:string value="Exact"
	Active,	///< xs:string value="Active"
	Closed,	///< xs:string value="Closed"
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://it.bmc.uu.se/whoson                                               *
 *                                                                            *
\******************************************************************************/


/// "http://it.bmc.uu.se/whoson":LogonEvent is a complexType.
class WhosOn__LogonEvent
{ public:
/// Element EventID of type xs:int.
    int                                  EventID                        1;	///< Required element.
/// Element Username of type xs:string.
    std::string                          Username                       0;	///< Optional element.
/// Element Domain of type xs:string.
    std::string                          Domain                         0;	///< Optional element.
/// Element HwAddress of type xs:string.
    std::string                          HwAddress                      0;	///< Optional element.
/// Element IpAddress of type xs:string.
    std::string                          IpAddress                      0;	///< Optional element.
/// Element Hostname of type xs:string.
    std::string                          Hostname                       0;	///< Optional element.
/// Element Workstation of type xs:string.
    std::string                          Workstation                    0;	///< Optional element.
/// Element StartTime of type xs:dateTime.
    time_t                               StartTime                      1;	///< Required element.
/// Element EndTime of type xs:dateTime.
    time_t                               EndTime                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// "http://it.bmc.uu.se/whoson":ArrayOfLogonEvent is a complexType.
class WhosOn__ArrayOfLogonEvent
{ public:
/// Vector of WhosOn__LogonEvent* with length 0..unbounded
    std::vector<WhosOn__LogonEvent*    > LogonEvent                     0;
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://it.bmc.uu.se/whoson":CreateLogonEvent

/// "http://it.bmc.uu.se/whoson":CreateLogonEvent is a complexType.
class _WhosOn__CreateLogonEvent
{ public:
/// Element user of type xs:string.
    std::string                          user                           0;	///< Optional element.
/// Element domain of type xs:string.
    std::string                          domain                         0;	///< Optional element.
/// Element computer of type xs:string.
    std::string                          computer                       0;	///< Optional element.
/// Element hwaddr of type xs:string.
    std::string                          hwaddr                         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://it.bmc.uu.se/whoson":CreateLogonEventResponse

/// "http://it.bmc.uu.se/whoson":CreateLogonEventResponse is a complexType.
class _WhosOn__CreateLogonEventResponse
{ public:
/// Element CreateLogonEventResult of type xs:int.
    int                                  CreateLogonEventResult         1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://it.bmc.uu.se/whoson":CloseLogonEvent

/// "http://it.bmc.uu.se/whoson":CloseLogonEvent is a complexType.
class _WhosOn__CloseLogonEvent
{ public:
/// Element eventID of type xs:int.
    int                                  eventID                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://it.bmc.uu.se/whoson":CloseLogonEventResponse

/// "http://it.bmc.uu.se/whoson":CloseLogonEventResponse is a complexType.
class _WhosOn__CloseLogonEventResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://it.bmc.uu.se/whoson":DeleteLogonEvent

/// "http://it.bmc.uu.se/whoson":DeleteLogonEvent is a complexType.
class _WhosOn__DeleteLogonEvent
{ public:
/// Element eventID of type xs:int.
    int                                  eventID                        1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://it.bmc.uu.se/whoson":DeleteLogonEventResponse

/// "http://it.bmc.uu.se/whoson":DeleteLogonEventResponse is a complexType.
class _WhosOn__DeleteLogonEventResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://it.bmc.uu.se/whoson":FindLogonEvent

/// "http://it.bmc.uu.se/whoson":FindLogonEvent is a complexType.
class _WhosOn__FindLogonEvent
{ public:
/// Element user of type xs:string.
    std::string                          user                           0;	///< Optional element.
/// Element domain of type xs:string.
    std::string                          domain                         0;	///< Optional element.
/// Element computer of type xs:string.
    std::string                          computer                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://it.bmc.uu.se/whoson":FindLogonEventResponse

/// "http://it.bmc.uu.se/whoson":FindLogonEventResponse is a complexType.
class _WhosOn__FindLogonEventResponse
{ public:
/// Element FindLogonEventResult of type "http://it.bmc.uu.se/whoson":LogonEvent.
    WhosOn__LogonEvent*                  FindLogonEventResult           1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://it.bmc.uu.se/whoson":FindLogonEvents

/// "http://it.bmc.uu.se/whoson":FindLogonEvents is a complexType.
class _WhosOn__FindLogonEvents
{ public:
/// Element filter of type "http://it.bmc.uu.se/whoson":LogonEvent.
    WhosOn__LogonEvent*                  filter                         1;	///< Required element.
/// Element match of type "http://it.bmc.uu.se/whoson":LogonEventMatch.
    enum WhosOn__LogonEventMatch         match                          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://it.bmc.uu.se/whoson":FindLogonEventsResponse

/// "http://it.bmc.uu.se/whoson":FindLogonEventsResponse is a complexType.
class _WhosOn__FindLogonEventsResponse
{ public:
/// Element FindLogonEventsResult of type "http://it.bmc.uu.se/whoson":ArrayOfLogonEvent.
    WhosOn__ArrayOfLogonEvent*           FindLogonEventsResult          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://it.bmc.uu.se/whoson                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://it.bmc.uu.se/whoson                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	LogonAccountingServiceSoap 
//gsoap ns1  service type:	LogonAccountingServiceSoap 
//gsoap ns1  service port:	http://localhost/websvc/whoson2/LogonAccountingService.asmx 
//gsoap ns1  service namespace:	http://it.bmc.uu.se/whoson/LogonAccountingServiceSoap 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap ns2  service name:	LogonAccountingServiceSoap12 
//gsoap ns2  service type:	LogonAccountingServiceSoap 
//gsoap ns2  service port:	http://localhost/websvc/whoson2/LogonAccountingService.asmx 
//gsoap ns2  service namespace:	http://it.bmc.uu.se/whoson/LogonAccountingServiceSoap12 
//gsoap ns2  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref LogonAccountingServiceSoap

  - @ref LogonAccountingServiceSoap12

@section Service_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page LogonAccountingServiceSoap Binding "LogonAccountingServiceSoap"

@section LogonAccountingServiceSoap_operations Operations of Binding  "LogonAccountingServiceSoap"

  - @ref __ns1__CreateLogonEvent

  - @ref __ns1__CloseLogonEvent

  - @ref __ns1__DeleteLogonEvent

  - @ref __ns1__FindLogonEvent

  - @ref __ns1__FindLogonEvents

@section LogonAccountingServiceSoap_ports Endpoints of Binding  "LogonAccountingServiceSoap"

  - http://localhost/websvc/whoson2/LogonAccountingService.asmx

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page LogonAccountingServiceSoap12 Binding "LogonAccountingServiceSoap12"

@section LogonAccountingServiceSoap12_operations Operations of Binding  "LogonAccountingServiceSoap12"

  - @ref __ns2__CreateLogonEvent

  - @ref __ns2__CloseLogonEvent

  - @ref __ns2__DeleteLogonEvent

  - @ref __ns2__FindLogonEvent

  - @ref __ns2__FindLogonEvents

@section LogonAccountingServiceSoap12_ports Endpoints of Binding  "LogonAccountingServiceSoap12"

  - http://localhost/websvc/whoson2/LogonAccountingService.asmx

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   LogonAccountingServiceSoap                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CreateLogonEvent                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__CreateLogonEvent" of service binding "LogonAccountingServiceSoap"

/**

Operation details:

Creates and return the ID of an logon session. The computer argument is the NetBIOS
name.

  - SOAP document/literal style messaging

  - SOAP action="http://it.bmc.uu.se/whoson/CreateLogonEvent"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CreateLogonEvent(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _WhosOn__CreateLogonEvent*          WhosOn__CreateLogonEvent,
    // response parameters:
    _WhosOn__CreateLogonEventResponse*  WhosOn__CreateLogonEventResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CreateLogonEvent(
    struct soap *soap,
    // request parameters:
    _WhosOn__CreateLogonEvent*          WhosOn__CreateLogonEvent,
    // response parameters:
    _WhosOn__CreateLogonEventResponse*  WhosOn__CreateLogonEventResponse
  );
@endcode

C++ proxy class (defined in soapLogonAccountingServiceSoapProxy.h):
@code
  class LogonAccountingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLogonAccountingServiceSoapService.h):
@code
  class LogonAccountingServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	CreateLogonEvent document
//gsoap ns1  service method-encoding:	CreateLogonEvent literal
//gsoap ns1  service method-action:	CreateLogonEvent http://it.bmc.uu.se/whoson/CreateLogonEvent
int __ns1__CreateLogonEvent(
    _WhosOn__CreateLogonEvent*          WhosOn__CreateLogonEvent,	///< Request parameter
    _WhosOn__CreateLogonEventResponse*  WhosOn__CreateLogonEventResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__CloseLogonEvent                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__CloseLogonEvent" of service binding "LogonAccountingServiceSoap"

/**

Operation details:

Close an existing logon session identified by the event ID

  - SOAP document/literal style messaging

  - SOAP action="http://it.bmc.uu.se/whoson/CloseLogonEvent"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__CloseLogonEvent(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _WhosOn__CloseLogonEvent*           WhosOn__CloseLogonEvent,
    // response parameters:
    _WhosOn__CloseLogonEventResponse*   WhosOn__CloseLogonEventResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__CloseLogonEvent(
    struct soap *soap,
    // request parameters:
    _WhosOn__CloseLogonEvent*           WhosOn__CloseLogonEvent,
    // response parameters:
    _WhosOn__CloseLogonEventResponse*   WhosOn__CloseLogonEventResponse
  );
@endcode

C++ proxy class (defined in soapLogonAccountingServiceSoapProxy.h):
@code
  class LogonAccountingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLogonAccountingServiceSoapService.h):
@code
  class LogonAccountingServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	CloseLogonEvent document
//gsoap ns1  service method-encoding:	CloseLogonEvent literal
//gsoap ns1  service method-action:	CloseLogonEvent http://it.bmc.uu.se/whoson/CloseLogonEvent
int __ns1__CloseLogonEvent(
    _WhosOn__CloseLogonEvent*           WhosOn__CloseLogonEvent,	///< Request parameter
    _WhosOn__CloseLogonEventResponse*   WhosOn__CloseLogonEventResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DeleteLogonEvent                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__DeleteLogonEvent" of service binding "LogonAccountingServiceSoap"

/**

Operation details:

Deletes the logon event identified by the event ID.

  - SOAP document/literal style messaging

  - SOAP action="http://it.bmc.uu.se/whoson/DeleteLogonEvent"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DeleteLogonEvent(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _WhosOn__DeleteLogonEvent*          WhosOn__DeleteLogonEvent,
    // response parameters:
    _WhosOn__DeleteLogonEventResponse*  WhosOn__DeleteLogonEventResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DeleteLogonEvent(
    struct soap *soap,
    // request parameters:
    _WhosOn__DeleteLogonEvent*          WhosOn__DeleteLogonEvent,
    // response parameters:
    _WhosOn__DeleteLogonEventResponse*  WhosOn__DeleteLogonEventResponse
  );
@endcode

C++ proxy class (defined in soapLogonAccountingServiceSoapProxy.h):
@code
  class LogonAccountingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLogonAccountingServiceSoapService.h):
@code
  class LogonAccountingServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	DeleteLogonEvent document
//gsoap ns1  service method-encoding:	DeleteLogonEvent literal
//gsoap ns1  service method-action:	DeleteLogonEvent http://it.bmc.uu.se/whoson/DeleteLogonEvent
int __ns1__DeleteLogonEvent(
    _WhosOn__DeleteLogonEvent*          WhosOn__DeleteLogonEvent,	///< Request parameter
    _WhosOn__DeleteLogonEventResponse*  WhosOn__DeleteLogonEventResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__FindLogonEvent                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__FindLogonEvent" of service binding "LogonAccountingServiceSoap"

/**

Operation details:

Find and return the logon event matching the request parameters.

  - SOAP document/literal style messaging

  - SOAP action="http://it.bmc.uu.se/whoson/FindLogonEvent"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__FindLogonEvent(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _WhosOn__FindLogonEvent*            WhosOn__FindLogonEvent,
    // response parameters:
    _WhosOn__FindLogonEventResponse*    WhosOn__FindLogonEventResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__FindLogonEvent(
    struct soap *soap,
    // request parameters:
    _WhosOn__FindLogonEvent*            WhosOn__FindLogonEvent,
    // response parameters:
    _WhosOn__FindLogonEventResponse*    WhosOn__FindLogonEventResponse
  );
@endcode

C++ proxy class (defined in soapLogonAccountingServiceSoapProxy.h):
@code
  class LogonAccountingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLogonAccountingServiceSoapService.h):
@code
  class LogonAccountingServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	FindLogonEvent document
//gsoap ns1  service method-encoding:	FindLogonEvent literal
//gsoap ns1  service method-action:	FindLogonEvent http://it.bmc.uu.se/whoson/FindLogonEvent
int __ns1__FindLogonEvent(
    _WhosOn__FindLogonEvent*            WhosOn__FindLogonEvent,	///< Request parameter
    _WhosOn__FindLogonEventResponse*    WhosOn__FindLogonEventResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__FindLogonEvents                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__FindLogonEvents" of service binding "LogonAccountingServiceSoap"

/**

Operation details:

Find and return all logon events matching the filter and match options.

  - SOAP document/literal style messaging

  - SOAP action="http://it.bmc.uu.se/whoson/FindLogonEvents"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__FindLogonEvents(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _WhosOn__FindLogonEvents*           WhosOn__FindLogonEvents,
    // response parameters:
    _WhosOn__FindLogonEventsResponse*   WhosOn__FindLogonEventsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__FindLogonEvents(
    struct soap *soap,
    // request parameters:
    _WhosOn__FindLogonEvents*           WhosOn__FindLogonEvents,
    // response parameters:
    _WhosOn__FindLogonEventsResponse*   WhosOn__FindLogonEventsResponse
  );
@endcode

C++ proxy class (defined in soapLogonAccountingServiceSoapProxy.h):
@code
  class LogonAccountingServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLogonAccountingServiceSoapService.h):
@code
  class LogonAccountingServiceSoapService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	FindLogonEvents document
//gsoap ns1  service method-encoding:	FindLogonEvents literal
//gsoap ns1  service method-action:	FindLogonEvents http://it.bmc.uu.se/whoson/FindLogonEvents
int __ns1__FindLogonEvents(
    _WhosOn__FindLogonEvents*           WhosOn__FindLogonEvents,	///< Request parameter
    _WhosOn__FindLogonEventsResponse*   WhosOn__FindLogonEventsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   LogonAccountingServiceSoap12                                             *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__CreateLogonEvent                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__CreateLogonEvent" of service binding "LogonAccountingServiceSoap12"

/**

Operation details:

Creates and return the ID of an logon session. The computer argument is the NetBIOS
name.

  - SOAP document/literal style messaging

  - SOAP action="http://it.bmc.uu.se/whoson/CreateLogonEvent"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__CreateLogonEvent(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _WhosOn__CreateLogonEvent*          WhosOn__CreateLogonEvent,
    // response parameters:
    _WhosOn__CreateLogonEventResponse*  WhosOn__CreateLogonEventResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__CreateLogonEvent(
    struct soap *soap,
    // request parameters:
    _WhosOn__CreateLogonEvent*          WhosOn__CreateLogonEvent,
    // response parameters:
    _WhosOn__CreateLogonEventResponse*  WhosOn__CreateLogonEventResponse
  );
@endcode

C++ proxy class (defined in soapLogonAccountingServiceSoap12Proxy.h):
@code
  class LogonAccountingServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLogonAccountingServiceSoap12Service.h):
@code
  class LogonAccountingServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	CreateLogonEvent document
//gsoap ns2  service method-encoding:	CreateLogonEvent literal
//gsoap ns2  service method-action:	CreateLogonEvent http://it.bmc.uu.se/whoson/CreateLogonEvent
int __ns2__CreateLogonEvent(
    _WhosOn__CreateLogonEvent*          WhosOn__CreateLogonEvent,	///< Request parameter
    _WhosOn__CreateLogonEventResponse*  WhosOn__CreateLogonEventResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__CloseLogonEvent                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__CloseLogonEvent" of service binding "LogonAccountingServiceSoap12"

/**

Operation details:

Close an existing logon session identified by the event ID

  - SOAP document/literal style messaging

  - SOAP action="http://it.bmc.uu.se/whoson/CloseLogonEvent"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__CloseLogonEvent(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _WhosOn__CloseLogonEvent*           WhosOn__CloseLogonEvent,
    // response parameters:
    _WhosOn__CloseLogonEventResponse*   WhosOn__CloseLogonEventResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__CloseLogonEvent(
    struct soap *soap,
    // request parameters:
    _WhosOn__CloseLogonEvent*           WhosOn__CloseLogonEvent,
    // response parameters:
    _WhosOn__CloseLogonEventResponse*   WhosOn__CloseLogonEventResponse
  );
@endcode

C++ proxy class (defined in soapLogonAccountingServiceSoap12Proxy.h):
@code
  class LogonAccountingServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLogonAccountingServiceSoap12Service.h):
@code
  class LogonAccountingServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	CloseLogonEvent document
//gsoap ns2  service method-encoding:	CloseLogonEvent literal
//gsoap ns2  service method-action:	CloseLogonEvent http://it.bmc.uu.se/whoson/CloseLogonEvent
int __ns2__CloseLogonEvent(
    _WhosOn__CloseLogonEvent*           WhosOn__CloseLogonEvent,	///< Request parameter
    _WhosOn__CloseLogonEventResponse*   WhosOn__CloseLogonEventResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__DeleteLogonEvent                                                  *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__DeleteLogonEvent" of service binding "LogonAccountingServiceSoap12"

/**

Operation details:

Deletes the logon event identified by the event ID.

  - SOAP document/literal style messaging

  - SOAP action="http://it.bmc.uu.se/whoson/DeleteLogonEvent"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__DeleteLogonEvent(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _WhosOn__DeleteLogonEvent*          WhosOn__DeleteLogonEvent,
    // response parameters:
    _WhosOn__DeleteLogonEventResponse*  WhosOn__DeleteLogonEventResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__DeleteLogonEvent(
    struct soap *soap,
    // request parameters:
    _WhosOn__DeleteLogonEvent*          WhosOn__DeleteLogonEvent,
    // response parameters:
    _WhosOn__DeleteLogonEventResponse*  WhosOn__DeleteLogonEventResponse
  );
@endcode

C++ proxy class (defined in soapLogonAccountingServiceSoap12Proxy.h):
@code
  class LogonAccountingServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLogonAccountingServiceSoap12Service.h):
@code
  class LogonAccountingServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	DeleteLogonEvent document
//gsoap ns2  service method-encoding:	DeleteLogonEvent literal
//gsoap ns2  service method-action:	DeleteLogonEvent http://it.bmc.uu.se/whoson/DeleteLogonEvent
int __ns2__DeleteLogonEvent(
    _WhosOn__DeleteLogonEvent*          WhosOn__DeleteLogonEvent,	///< Request parameter
    _WhosOn__DeleteLogonEventResponse*  WhosOn__DeleteLogonEventResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__FindLogonEvent                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__FindLogonEvent" of service binding "LogonAccountingServiceSoap12"

/**

Operation details:

Find and return the logon event matching the request parameters.

  - SOAP document/literal style messaging

  - SOAP action="http://it.bmc.uu.se/whoson/FindLogonEvent"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__FindLogonEvent(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _WhosOn__FindLogonEvent*            WhosOn__FindLogonEvent,
    // response parameters:
    _WhosOn__FindLogonEventResponse*    WhosOn__FindLogonEventResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__FindLogonEvent(
    struct soap *soap,
    // request parameters:
    _WhosOn__FindLogonEvent*            WhosOn__FindLogonEvent,
    // response parameters:
    _WhosOn__FindLogonEventResponse*    WhosOn__FindLogonEventResponse
  );
@endcode

C++ proxy class (defined in soapLogonAccountingServiceSoap12Proxy.h):
@code
  class LogonAccountingServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLogonAccountingServiceSoap12Service.h):
@code
  class LogonAccountingServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	FindLogonEvent document
//gsoap ns2  service method-encoding:	FindLogonEvent literal
//gsoap ns2  service method-action:	FindLogonEvent http://it.bmc.uu.se/whoson/FindLogonEvent
int __ns2__FindLogonEvent(
    _WhosOn__FindLogonEvent*            WhosOn__FindLogonEvent,	///< Request parameter
    _WhosOn__FindLogonEventResponse*    WhosOn__FindLogonEventResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns2__FindLogonEvents                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns2__FindLogonEvents" of service binding "LogonAccountingServiceSoap12"

/**

Operation details:

Find and return all logon events matching the filter and match options.

  - SOAP document/literal style messaging

  - SOAP action="http://it.bmc.uu.se/whoson/FindLogonEvents"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns2__FindLogonEvents(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _WhosOn__FindLogonEvents*           WhosOn__FindLogonEvents,
    // response parameters:
    _WhosOn__FindLogonEventsResponse*   WhosOn__FindLogonEventsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns2__FindLogonEvents(
    struct soap *soap,
    // request parameters:
    _WhosOn__FindLogonEvents*           WhosOn__FindLogonEvents,
    // response parameters:
    _WhosOn__FindLogonEventsResponse*   WhosOn__FindLogonEventsResponse
  );
@endcode

C++ proxy class (defined in soapLogonAccountingServiceSoap12Proxy.h):
@code
  class LogonAccountingServiceSoap12Proxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapLogonAccountingServiceSoap12Service.h):
@code
  class LogonAccountingServiceSoap12Service;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns2  service method-style:	FindLogonEvents document
//gsoap ns2  service method-encoding:	FindLogonEvents literal
//gsoap ns2  service method-action:	FindLogonEvents http://it.bmc.uu.se/whoson/FindLogonEvents
int __ns2__FindLogonEvents(
    _WhosOn__FindLogonEvents*           WhosOn__FindLogonEvents,	///< Request parameter
    _WhosOn__FindLogonEventsResponse*   WhosOn__FindLogonEventsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section WhosOn Top-level root elements of schema "http://it.bmc.uu.se/whoson"

  - <WhosOn:CreateLogonEvent> @ref _WhosOn__CreateLogonEvent
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WhosOn__CreateLogonEvent(struct soap*, _WhosOn__CreateLogonEvent*);
    // Writer (returns SOAP_OK on success):
    soap_write__WhosOn__CreateLogonEvent(struct soap*, _WhosOn__CreateLogonEvent*);
    @endcode

  - <WhosOn:CreateLogonEventResponse> @ref _WhosOn__CreateLogonEventResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WhosOn__CreateLogonEventResponse(struct soap*, _WhosOn__CreateLogonEventResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__WhosOn__CreateLogonEventResponse(struct soap*, _WhosOn__CreateLogonEventResponse*);
    @endcode

  - <WhosOn:CloseLogonEvent> @ref _WhosOn__CloseLogonEvent
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WhosOn__CloseLogonEvent(struct soap*, _WhosOn__CloseLogonEvent*);
    // Writer (returns SOAP_OK on success):
    soap_write__WhosOn__CloseLogonEvent(struct soap*, _WhosOn__CloseLogonEvent*);
    @endcode

  - <WhosOn:CloseLogonEventResponse> @ref _WhosOn__CloseLogonEventResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WhosOn__CloseLogonEventResponse(struct soap*, _WhosOn__CloseLogonEventResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__WhosOn__CloseLogonEventResponse(struct soap*, _WhosOn__CloseLogonEventResponse*);
    @endcode

  - <WhosOn:DeleteLogonEvent> @ref _WhosOn__DeleteLogonEvent
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WhosOn__DeleteLogonEvent(struct soap*, _WhosOn__DeleteLogonEvent*);
    // Writer (returns SOAP_OK on success):
    soap_write__WhosOn__DeleteLogonEvent(struct soap*, _WhosOn__DeleteLogonEvent*);
    @endcode

  - <WhosOn:DeleteLogonEventResponse> @ref _WhosOn__DeleteLogonEventResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WhosOn__DeleteLogonEventResponse(struct soap*, _WhosOn__DeleteLogonEventResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__WhosOn__DeleteLogonEventResponse(struct soap*, _WhosOn__DeleteLogonEventResponse*);
    @endcode

  - <WhosOn:FindLogonEvent> @ref _WhosOn__FindLogonEvent
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WhosOn__FindLogonEvent(struct soap*, _WhosOn__FindLogonEvent*);
    // Writer (returns SOAP_OK on success):
    soap_write__WhosOn__FindLogonEvent(struct soap*, _WhosOn__FindLogonEvent*);
    @endcode

  - <WhosOn:FindLogonEventResponse> @ref _WhosOn__FindLogonEventResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WhosOn__FindLogonEventResponse(struct soap*, _WhosOn__FindLogonEventResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__WhosOn__FindLogonEventResponse(struct soap*, _WhosOn__FindLogonEventResponse*);
    @endcode

  - <WhosOn:FindLogonEvents> @ref _WhosOn__FindLogonEvents
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WhosOn__FindLogonEvents(struct soap*, _WhosOn__FindLogonEvents*);
    // Writer (returns SOAP_OK on success):
    soap_write__WhosOn__FindLogonEvents(struct soap*, _WhosOn__FindLogonEvents*);
    @endcode

  - <WhosOn:FindLogonEventsResponse> @ref _WhosOn__FindLogonEventsResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__WhosOn__FindLogonEventsResponse(struct soap*, _WhosOn__FindLogonEventsResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__WhosOn__FindLogonEventsResponse(struct soap*, _WhosOn__FindLogonEventsResponse*);
    @endcode

*/

/* End of service.h */
